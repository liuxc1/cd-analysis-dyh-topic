<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 人工预报核对模块 -->
<mapper namespace="ths.project.analysis.forecast.airforecastcheck.mapper.AirForecastCheakMapper">
	<!-- 获取专家预报核对数据 -->
	<select id="queryHumanForecastCheckData" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			CONVERT(VARCHAR,GENERATE_SERIES_TIME,23) AS REPORT_TIME,
			CONVERT(VARCHAR,V_RESULT_TIME,23) AS RESULT_TIME,
			B.AQI,
			MINAQI,
			MAXAQI,
			AVGAQI,

			B.PM25,
			MINPM25,
			MAXPM25,
			AVGPM25,

			B.O3,
			MINO3,
			MAXO3,
			AVGO3,

			B.AQI_LEVEL,
			B.PRIM_POLLUTE,

			C.AQI SKAQI,
			C.PM2_5 SKPM25,
			C.O3_8 SKO3,
			C.AQISTATIONNAME AQILEVELSTATE,
			C.PRIMARYPOLLUTANT SPRIMPOLLUTE,
			CASE WHEN B.AQI IS NULL OR C.AQI IS NULL THEN null WHEN C.AQI  BETWEEN MINAQI  AND  MAXAQI THEN '1' ELSE '0' END AQIC,
			CASE WHEN B.PM25 IS NULL OR C.PM2_5 IS NULL THEN null WHEN C.PM2_5  BETWEEN MINPM25  AND  MAXPM25 THEN '1' ELSE '0' END PM25C,
			CASE WHEN B.O3 IS NULL OR C.O3_8 IS NULL THEN null WHEN C.O3_8  BETWEEN MINO3  AND  MAXO3 THEN '1' ELSE '0' END O3C
		FROM (
				SELECT
					DATEADD(DAY,V_RESULT, #{START_TIME}) V_RESULT_TIME,
					DATEADD(DAY,V_RESULT, #{START_TIME}) - ${TIME_STEP} GENERATE_SERIES_TIME
				FROM
					[DBO].GENERATE_SERIES(0, DATEDIFF(DAY, #{START_TIME}, #{END_TIME}), 1)
			) A LEFT JOIN (
				SELECT
					A.AQI,
					A.AQI_MIN AS MINAQI,
					A.AQI_MAX AS MAXAQI,
					A.AQI_MEDIAN AS AVGAQI,
					A.PM25,
				  	A.PM25_MIN AS MINPM25,
					A.PM25_MAX AS MAXPM25,
					A.PM25_MEDIAN AS AVGPM25,
					A.O3,
					A.O3_MIN AS MINO3,
					A.O3_MAX AS MAXO3,
					A.O3_MEDIAN AS AVGO3,
					A.AQI_LEVEL,
					A.PRIM_POLLUTE,
					A.RESULT_TIME,
					B.REPORT_TIME,
					B.EDIT_TIME,
					ROW_NUMBER() OVER(PARTITION BY RESULT_TIME,REPORT_TIME ORDER BY EDIT_TIME DESC) RN,
					DATEDIFF(DAY,B.REPORT_TIME,A.RESULT_TIME) STEP
				FROM
					T_ANS_FLOW_WQ_ROW A
				LEFT JOIN T_ANS_GENERAL_REPORT B ON
					A.INFO_ID = B.REPORT_ID
					AND B.STATE = 'UPLOAD'
			    WHERE IS_MAIN=1
			) B
			ON A.GENERATE_SERIES_TIME = B.REPORT_TIME
			AND RN = 1 
			AND STEP = #{TIME_STEP}
			LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY  C
			ON A.V_RESULT_TIME = C.MONITORTIME
			AND C.CODE_REGION ='510100000000'
	 ORDER BY
        GENERATE_SERIES_TIME
</select>
	<!-- 获取最新监测时间 -->
    <select id="queryMaxTime" resultType="java.util.Map" >
		SELECT
			CONVERT( VARCHAR, ISNULL(MAX ( MONITORTIME ),GETDATE()) - 29, 23 ) AS START_TIME,
			CONVERT ( VARCHAR,ISNULL(MAX ( MONITORTIME ),GETDATE()), 23 ) AS END_TIME
		FROM
			TENVAIR.T_ENV_AIRDATA_REGION_DAY
			<where>
				<if test='isCd != null and isCd != ""'>
					and CODE_REGION != '510100000000'
				</if>
			</where>
	</select>

	<!--专家、个人根据step,求预报及实测平均值-->
	<select id="queryPersonAvgData" resultType="java.util.Map">
		with XA as(
			-- 专家预报数据
			SELECT
				A.AQI_MEDIAN,
				A.PM25_MEDIAN,
				A.O3_MEDIAN,
				A.RESULT_TIME,
				DATEDIFF(DAY,B.REPORT_TIME,A.RESULT_TIME) STEP
			FROM T_ANS_FLOW_WQ_ROW A
			INNER JOIN T_ANS_GENERAL_REPORT B ON A.INFO_ID = B.REPORT_ID
				AND B.STATE = 'UPLOAD'
			  <if test="type=='ZJPG'">
				  AND B.IS_MAIN=1
			  </if>
			  <if test="type=='GRPG'">
				  AND B.CREATE_USER =#{userName}
			  </if>
				AND A.RESULT_TIME>=convert(datetime,#{START_TIME},20)
				<![CDATA[
			 	AND A.RESULT_TIME<=convert(datetime,#{END_TIME},20)
		   		]]>
		)
		  -- 每个步长的预报和实测平均值
			SELECT
				B.STEP,
				-- 预报平均
				AVG(CAST(A.AQI_MEDIAN AS DECIMAL(10,2))) AS AVGAQI_YB,
				AVG(CAST(A.PM25_MEDIAN AS DECIMAL(10,2))) AS  AVGPM25_YB,
				AVG(CAST(A.O3_MEDIAN AS DECIMAL(10,2))) AS AVGO3_YB,
				-- 实测平均
				AVG(C.AQI) AS AVGAQI_SC ,
				AVG(C.PM2_5) AS AVGPM25_SC,
				AVG(C.O3_8) AS AVGO3_SC
			FROM
			(
			SELECT * FROM
				(
					SELECT DATEADD(DAY,number, #{START_TIME}) V_RESULT_TIME
					FROM master..spt_values
					WHERE type = 'p' AND number between 0 and DATEDIFF(DAY, #{START_TIME}, #{END_TIME})
				) A
				INNER JOIN (SELECT v_result as STEP from [DBO].GENERATE_SERIES(1,7,1))B ON 1=1
			) B
			LEFT JOIN XA A ON B.V_RESULT_TIME=A.RESULT_TIME AND  A.STEP = B.STEP
			LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY  C ON B.V_RESULT_TIME = C.MONITORTIME AND C.CODE_REGION ='510100000000'
			<if test="type=='GRPG'">
				AND A.RESULT_TIME = C.MONITORTIME
			</if>
			GROUP BY B.STEP

	</select>

	<!--专家评估，每step平均预报人数-->
	<select id="queryAvgPerson" resultType="java.util.Map">
		SELECT
			 -- 平均每天预报人数
			ROUND(CAST(COUNT(*) AS FLOAT)/(DATEDIFF(DAY,CONVERT(datetime,#{START_TIME},120),CONVERT(datetime,#{END_TIME},120))+1),2 )AS YBRS
			-- 步长
			,CAST(STEP AS VARCHAR) AS STEP
		FROM(
			SELECT
				A.PKID,
				DATEDIFF(DAY,B.REPORT_TIME,A.RESULT_TIME) STEP
			FROM T_ANS_FLOW_WQ_ROW A
			INNER JOIN T_ANS_GENERAL_REPORT B ON A.INFO_ID = B.REPORT_ID
			AND B.STATE = 'UPLOAD'
			AND A.RESULT_TIME>=convert(datetime,#{START_TIME},20)
			<![CDATA[
			 AND A.RESULT_TIME<=convert(datetime,#{END_TIME},20)
		    ]]>
		) T	GROUP BY STEP
	</select>

	<!--获取专家预报表格数据-->
	<select id="queryHumanForecastTableData" resultType="java.util.LinkedHashMap">

		with XA as(
			-- 主班预报数据
			SELECT

				A.AQI_MIN,
				A.AQI_MAX,
				A.AQI_MEDIAN,

				A.PM25_MIN,
				A.PM25_MAX,
				A.PM25_MEDIAN,

				A.O3_MIN,
				A.O3_MAX,
				A.O3_MEDIAN,
			    A.AQI_LEVEL,
				CASE WHEN A.PRIM_POLLUTE='O3' THEN 'O3_8' ELSE A.PRIM_POLLUTE END AS PRIM_POLLUTE,
				A.RESULT_TIME,
				B.REPORT_TIME,
				ROW_NUMBER() OVER(PARTITION BY RESULT_TIME,REPORT_TIME ORDER BY EDIT_TIME DESC) RN,
				DATEDIFF(DAY,B.REPORT_TIME,A.RESULT_TIME) STEP
			FROM T_ANS_FLOW_WQ_ROW A
			INNER JOIN T_ANS_GENERAL_REPORT B ON A.INFO_ID = B.REPORT_ID
				AND B.STATE = 'UPLOAD'
				AND B.IS_MAIN=1
				AND A.RESULT_TIME>=convert(datetime,#{START_TIME},20)
				<![CDATA[AND A.RESULT_TIME<=convert(datetime,#{END_TIME},20)]]>
		)
		SELECT
			CAST (T.STEP AS VARCHAR) AS STEP,
			-- 首要污染物预报准确率
			CASE WHEN PPRIM_POLLUTE_TOTLE !=0 THEN CAST(ROUND(CAST(PPRIM_POLLUTE_ZQ AS FLOAT)*100/PPRIM_POLLUTE_TOTLE,2) AS VARCHAR)+'%' ELSE '-' END as PRIM_POLLUTE_ZQL,
			-- 空气质量等级预报命中率
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(CAST(AQI_LEVEL_MZ AS FLOAT)*100/YB_YXTS,2) AS VARCHAR)+'%' ELSE '-' END as AQI_LEVEL_MZL,
			-- 空气质量等级预报准确率
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(CAST(AQI_LEVEL_ZQ AS FLOAT)*100/YB_YXTS,2) AS VARCHAR)+'%' ELSE '-' END as AQI_LEVEL_ZQL,
			CAST(YB_YXTS AS VARCHAR)+'/'+ CAST(TOTAL AS VARCHAR) AS YXTS,
			-- 重度污染准确
			CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_ZQ AS FLOAT)*100/ZDWR_ALL,2)AS VARCHAR)+'%' ELSE '-' END as ZDWR_ZQL,
			-- 重度污染误报
			CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_WB AS FLOAT)*100/ZDWR_ALL,2) AS VARCHAR)+'%' ELSE '-' END as ZDWR_WBL,
			-- 重度污染空报
			CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_KB AS FLOAT)*100/ZDWR_ALL,2) AS VARCHAR)+'%' ELSE '-' END as ZDWR_KBL,
			-- pm25
			SUBSTRING(PM25_JD, 1, charindex( '.',PM25_JD ) + 2) AS PM25_JD,
			SUBSTRING(PM25_PC, 1, charindex( '.',PM25_PC ) + 2) AS PM25_PC,
			SUBSTRING(PM25_XGX, 1, charindex( '.',PM25_XGX ) + 2) AS PM25_XGX,
			CAST(ROUND(PM25_YCBZC,2)AS VARCHAR) AS PM25_YCBZC,
			CAST(ROUND(PM25_SCBZC,2)AS VARCHAR)AS PM25_SCBZC,
			CASE WHEN YB_PM25 !=0 THEN CAST(ROUND(CAST(PM25C AS FLOAT)*100/YB_PM25,2)AS VARCHAR) +'%' ELSE '-' END AS PM25_MZL,
			YB_PM25,
			-- AQI
			SUBSTRING(AQI_JD, 1, charindex( '.',AQI_JD ) + 2) AS AQI_JD,
			SUBSTRING(AQI_PC, 1, charindex( '.',AQI_PC ) + 2) AS AQI_PC,
			SUBSTRING(AQI_XGX, 1, charindex( '.',AQI_XGX ) + 2) AS AQI_XGX,
			CAST(ROUND(AQI_YCBZC,2)AS VARCHAR) AS AQI_YCBZC,
			CAST(ROUND(AQI_SCBZC,2)AS VARCHAR)AS AQI_SCBZC,
			CASE WHEN YB_AQI !=0 THEN CAST(ROUND(CAST(AQIC AS FLOAT)*100/YB_AQI,2)AS VARCHAR) +'%' ELSE '-' END  AS AQI_MZL,
			YB_AQI,
			-- O3
			SUBSTRING(O3_JD, 1, charindex( '.',O3_JD ) + 2) AS O3_JD,
			SUBSTRING(O3_PC, 1, charindex( '.',O3_PC ) + 2) AS O3_PC,
			SUBSTRING(O3_XGX, 1, charindex( '.',O3_XGX ) + 2) AS O3_XGX,
			CAST(ROUND(O3_YCBZC,2)AS VARCHAR) AS O3_YCBZC,
			CAST(ROUND(O3_SCBZC,2)AS VARCHAR)AS O3_SCBZC,
			CASE WHEN YB_O3 !=0 THEN CAST(ROUND(CAST(O3C AS FLOAT)*100/YB_O3,2)AS VARCHAR) +'%' ELSE '-' END AS O3_MZL,
			YB_O3
		FROM(
			SELECT
			STEP,
			TOTAL,
			PPRIM_POLLUTE_ZQ,
			PPRIM_POLLUTE_TOTLE,
			AQI_LEVEL_MZ,
			AQI_LEVEL_ZQ,
			YB_YXTS,
			ZDWR_ALL,
			ZDWR_ZQ,
			ZDWR_WB,
			ZDWR_KB,
			-- PM25
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(PM25_JD/YB_YXTS,2) AS VARCHAR)  ELSE '-' END AS PM25_JD,
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(PM25_PC/YB_YXTS,2) AS VARCHAR)  ELSE '-' END AS PM25_PC,
			CASE
				WHEN YB_YXTS !=0 AND PM25_YCBZC !=0 AND PM25_SCBZC !=0 THEN CAST(ROUND(PM25_COV/(YB_YXTS*PM25_YCBZC*PM25_SCBZC),2) AS VARCHAR)
				ELSE '-'
			END AS PM25_XGX,
			PM25_YCBZC,
			PM25_SCBZC,
			PM25C,
			YB_PM25,
			-- AQI
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(AQI_JD/YB_YXTS,2) AS VARCHAR)  ELSE '-' END AS AQI_JD,
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(AQI_PC/YB_YXTS,2) AS VARCHAR)  ELSE '-' END AS AQI_PC,
			CASE
				WHEN YB_YXTS !=0 AND AQI_YCBZC !=0 AND AQI_SCBZC !=0 THEN CAST(ROUND(AQI_COV/(YB_YXTS*AQI_YCBZC*AQI_SCBZC),2) AS VARCHAR)
				ELSE '-'
			END AS AQI_XGX,
			AQI_YCBZC,
			AQI_SCBZC,
			AQIC,
			YB_AQI,
			-- O3
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(O3_JD/YB_YXTS,2) AS VARCHAR)  ELSE '-' END AS O3_JD,
			CASE WHEN YB_YXTS !=0 THEN CAST(ROUND(O3_PC/YB_YXTS,2) AS VARCHAR)  ELSE '-' END AS O3_PC,
			CASE
				WHEN YB_YXTS !=0 AND O3_YCBZC !=0 AND O3_SCBZC !=0 THEN CAST(ROUND(O3_COV/(YB_YXTS*O3_YCBZC*O3_SCBZC),2) AS VARCHAR)
				ELSE '-'
			END AS O3_XGX,
			O3_YCBZC,
			O3_SCBZC,
			O3C,
			YB_O3
			FROM(
				SELECT
					--预报步长
					A.STEP,
					-- 总天数
					DATEDIFF(DAY,CONVERT(datetime,#{START_TIME},20),CONVERT(datetime,#{END_TIME},20))+1 AS TOTAL,
					-- 首要污染物预报准确次数
					COUNT(CASE WHEN C.CODE_AQILEVEL>=2 and dbo.judge_prim_contain(B.PRIM_POLLUTE,C.PRIMARYPOLLUTANT)=1 THEN 1 END) AS PPRIM_POLLUTE_ZQ,
					-- 实测有首要污染物次数
					COUNT(CASE WHEN C.CODE_AQILEVEL>=2 THEN 1 END) AS PPRIM_POLLUTE_TOTLE,
					-- 空气质量等级预报命中次数
					SUM(
						CASE
							WHEN B.AQI_LEVEL=C.AQISTATIONNAME THEN 1
							WHEN replace(B.AQI_LEVEL,'污染','') like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 0.5
							ELSE 0
						END
					)  AS AQI_LEVEL_MZ,
					-- 空气质量等级预报准确次数
					COUNT(CASE WHEN replace(B.AQI_LEVEL,'污染','') like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS AQI_LEVEL_ZQ,
					-- 预报有效天数
					COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END) YB_YXTS,
					-- 重度污染总天数
					COUNT(CASE WHEN C.CODE_AQILEVEL>=5 THEN 1 END) AS ZDWR_ALL,
					-- 重度污染准确次数
					COUNT(CASE WHEN C.CODE_AQILEVEL>=5 AND B.AQI_LEVEL IS NOT NULL AND replace(B.AQI_LEVEL,'污染','')  like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS ZDWR_ZQ,
					-- 重度污染误报次数
					COUNT(CASE WHEN C.CODE_AQILEVEL>=5 AND B.AQI_LEVEL IS NOT NULL AND replace(B.AQI_LEVEL,'污染','')  NOT like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS ZDWR_WB,
					-- 重度污染空报次数
					COUNT(CASE WHEN C.CODE_AQILEVEL>=5 AND B.AQI_LEVEL IS  NULL THEN 1 END) AS ZDWR_KB,
					-- PM2.5精度
					SUM(ABS(B.PM25_MEDIAN-C.PM2_5))  AS PM25_JD,
					-- PM2.5偏差
					SUM(B.PM25_MEDIAN-C.PM2_5) AS PM25_PC,
					-- PM2.5相关性(COV)
					SUM((B.PM25_MEDIAN- D.AVGPM25_YB)*(C.PM2_5-D.AVGPM25_SC)) AS PM25_COV,
					-- PM2.5预测标准差
					CASE WHEN COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(B.PM25_MEDIAN- D.AVGPM25_YB))/(COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS PM25_YCBZC,
					-- PM2.5实测标准差
					CASE WHEN COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(C.PM2_5-D.AVGPM25_SC))/(COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS PM25_SCBZC,
					-- PM2.5命中次数
					COUNT(CASE WHEN B.PM25_MEDIAN IS NULL OR C.PM2_5 IS NULL THEN null WHEN C.PM2_5  BETWEEN B.PM25_MIN  AND  B.PM25_MAX  THEN 1 END) AS PM25C,
					-- PM2.5预报天数
					COUNT(CASE WHEN B.PM25_MEDIAN IS NOT NULL THEN 1 END) YB_PM25,
					-- AQI
					SUM(ABS(B.AQI_MEDIAN-C.AQI)) AS AQI_JD,
					SUM(B.AQI_MEDIAN-C.AQI) AS AQI_PC,
					SUM((B.AQI_MEDIAN- D.AVGAQI_YB)*(C.AQI-D.AVGAQI_SC)) AS AQI_COV,
					CASE WHEN COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(B.AQI_MEDIAN- D.AVGAQI_YB))/(COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS AQI_YCBZC,
					CASE WHEN COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(C.AQI-D.AVGAQI_SC))/(COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS AQI_SCBZC,
					COUNT(CASE WHEN B.AQI_MEDIAN IS NULL OR C.AQI IS NULL THEN null WHEN C.AQI  BETWEEN B.AQI_MIN  AND  B.AQI_MAX THEN 1 END ) AS AQIC,
					COUNT(CASE WHEN B.AQI_MEDIAN IS NOT NULL THEN 1 END) YB_AQI,
					-- O3
					SUM(ABS(B.O3_MEDIAN-C.O3_8)) AS O3_JD,
					SUM(B.O3_MEDIAN-C.O3_8) AS O3_PC,
					SUM((B.O3_MEDIAN- D.AVGO3_YB)*(C.O3_8-D.AVGO3_SC)) AS O3_COV,
					CASE WHEN COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(B.O3_MEDIAN- D.AVGO3_YB))/(COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS O3_YCBZC,
					CASE WHEN COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(C.O3_8-D.AVGO3_SC))/(COUNT(CASE WHEN B.AQI_LEVEL IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS O3_SCBZC,
					COUNT(CASE WHEN B.O3_MEDIAN IS NULL OR C.O3_8 IS NULL THEN null WHEN C.O3_8  BETWEEN B.O3_MIN  AND  B.O3_MAX THEN '1' END) O3C,
					COUNT(CASE WHEN B.O3_MEDIAN IS NOT NULL THEN 1 END) YB_O3
					FROM (
						SELECT * FROM
						(
						SELECT DATEADD(DAY,number, #{START_TIME}) V_RESULT_TIME
						FROM master..spt_values
						WHERE type = 'p' AND number between 0 and DATEDIFF(DAY, #{START_TIME}, #{END_TIME})
						) A
						INNER JOIN (SELECT v_result as step from [DBO].GENERATE_SERIES(1,7,1))B ON 1=1
						) A
					LEFT JOIN XA B	ON A.V_RESULT_TIME = B.RESULT_TIME AND A.STEP = B.STEP AND B.RN = 1
					-- 实况监测数据
					LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY  C ON A.V_RESULT_TIME = C.MONITORTIME AND C.CODE_REGION ='510100000000'
					LEFT JOIN(
					-- 每个步长的预报和测试平均值
					<foreach collection="avgDataList" item="item" separator=" union all ">
						SELECT
						#{item.STEP} as STEP
						,#{item.AVGAQI_YB} as AVGAQI_YB
						,#{item.AVGPM25_YB} as AVGPM25_YB
						,#{item.AVGO3_YB} as AVGO3_YB
						,#{item.AVGAQI_SC} as AVGAQI_SC
						,#{item.AVGPM25_SC} as AVGPM25_SC
						,#{item.AVGO3_SC} as AVGO3_SC
					</foreach>
				) D ON B.STEP= D.STEP GROUP BY A.STEP
			) Y
		) T
	</select>

	<!--获取预报人员 -->
	<select id="getForecastUser" resultType="java.util.Map">
		SELECT
		B.CREATE_USER AS userName
		FROM
		T_ANS_GENERAL_REPORT B
		INNER JOIN T_ANS_FLOW_WQ_ROW A ON B.REPORT_ID=A.INFO_ID
		WHERE
		A.RESULT_TIME>= CONVERT ( datetime, #{START_TIME}, 20 )
		<![CDATA[AND A.RESULT_TIME<= CONVERT ( datetime, #{END_TIME}, 20 )]]>
		AND B.STATE = 'UPLOAD'
		GROUP BY
		B.CREATE_USER
		order by userName
	</select>
	<!-- 获取个人预报核对数据 -->
	<select id="queryPersonForecastCheckData" resultType="java.util.Map">
		SELECT
			CONVERT(VARCHAR,GENERATE_SERIES_TIME,23) AS REPORT_TIME,
			CONVERT(VARCHAR,V_RESULT_TIME,23) AS RESULT_TIME,
			B.AQI,
			MINAQI,
			MAXAQI,
			AVGAQI,

			B.PM25,
			MINPM25,
			MAXPM25,
			AVGPM25,

			B.O3,
			MINO3,
			MAXO3,
			AVGO3,

			B.AQI_LEVEL,
			B.PRIM_POLLUTE,

			C.AQI SKAQI,
			C.PM2_5 SKPM25,
			C.O3_8 SKO3,
			C.AQISTATIONNAME AQILEVELSTATE,
			C.PRIMARYPOLLUTANT SPRIMPOLLUTE,
			CASE WHEN B.AQI IS NULL OR C.AQI IS NULL THEN null WHEN C.AQI  BETWEEN MINAQI  AND  MAXAQI THEN '1' ELSE '0' END AQIC,
			CASE WHEN B.PM25 IS NULL OR C.PM2_5 IS NULL THEN null WHEN C.PM2_5  BETWEEN MINPM25  AND  MAXPM25 THEN '1' ELSE '0' END PM25C,
			CASE WHEN B.O3 IS NULL OR C.O3_8 IS NULL THEN null WHEN C.O3_8  BETWEEN MINO3  AND  MAXO3 THEN '1' ELSE '0' END O3C,
			B.CREATE_USER,
		    b.RN
		FROM (
				 SELECT
					 DATEADD(DAY,V_RESULT, #{START_TIME}) V_RESULT_TIME,
					 DATEADD(DAY,V_RESULT, #{START_TIME}) - ${TIME_STEP} GENERATE_SERIES_TIME
				 FROM
					 [DBO].GENERATE_SERIES(0, DATEDIFF(DAY, #{START_TIME}, #{END_TIME}), 1)
			 ) A LEFT JOIN (
			SELECT
				A.AQI,
				A.AQI_MIN AS MINAQI,
				A.AQI_MAX AS MAXAQI,
				A.AQI_MEDIAN AS AVGAQI,
				A.PM25,
				A.PM25_MIN AS MINPM25,
				A.PM25_MAX AS MAXPM25,
				A.PM25_MEDIAN AS AVGPM25,
				A.O3,
				A.O3_MIN AS MINO3,
				A.O3_MAX AS MAXO3,
				A.O3_MEDIAN AS AVGO3,
				A.AQI_LEVEL,
				A.PRIM_POLLUTE,
				A.RESULT_TIME,
				B.REPORT_TIME,
				B.EDIT_TIME,
				B.CREATE_USER,
				ROW_NUMBER() OVER(PARTITION BY RESULT_TIME,REPORT_TIME ORDER BY EDIT_TIME DESC) RN,
				DATEDIFF(DAY,B.REPORT_TIME,A.RESULT_TIME) STEP
			FROM
				T_ANS_FLOW_WQ_ROW A
				LEFT JOIN T_ANS_GENERAL_REPORT B ON
				A.INFO_ID = B.REPORT_ID
				AND B.STATE = 'UPLOAD'
			WHERE 1=1
			<if test="userNames!='' and userNames!=null">
				AND B.CREATE_USER IN
				<foreach collection='userNames.split(",")' item="item" open="(" close=")" separator=",">
					#{item}
				</foreach>
			</if>
			<if test="userNames =='' or userNames==null">
				AND B.CREATE_USER=''
			</if>
		) B
		   ON A.GENERATE_SERIES_TIME = B.REPORT_TIME
			   -- AND RN = 1
			   AND STEP = #{TIME_STEP}
		 LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY  C
				   ON A.V_RESULT_TIME = C.MONITORTIME
				   AND C.CODE_REGION ='510100000000'
	</select>

	<!--获取个人预报表格数据-->
	<select id="queryPersonForecastTableData" resultType="java.util.LinkedHashMap">
		with XA as(
			-- 主班预报数据
			SELECT
				A.AQI_MIN,
				A.AQI_MAX,
				A.AQI_MEDIAN,
				A.PM25_MIN,
				A.PM25_MAX,
				A.PM25_MEDIAN,
				A.O3_MIN,
				A.O3_MAX,
				A.O3_MEDIAN,
				A.AQI_LEVEL,
				CASE WHEN A.PRIM_POLLUTE='O3' THEN 'O3_8' ELSE A.PRIM_POLLUTE END AS PRIM_POLLUTE,
				A.RESULT_TIME,
				B.REPORT_TIME,
				ROW_NUMBER() OVER(PARTITION BY RESULT_TIME,REPORT_TIME ORDER BY EDIT_TIME DESC) RN,
				DATEDIFF(DAY,B.REPORT_TIME,A.RESULT_TIME) STEP
			FROM T_ANS_FLOW_WQ_ROW A
			INNER JOIN T_ANS_GENERAL_REPORT B ON A.INFO_ID = B.REPORT_ID
			AND B.STATE = 'UPLOAD'
			AND B.CREATE_USER= #{userName}
			AND A.RESULT_TIME>=convert(datetime,#{START_TIME},20)
			<![CDATA[AND A.RESULT_TIME<=convert(datetime,#{END_TIME},20)]]>
		)
		SELECT
			STEP,
			ISNULL(YBTS,'-') AS YBTS,
			CASE WHEN PPRIM_POLLUTE_TOTLE !=0 THEN CAST(ROUND(CAST(PPRIM_POLLUTE_ZQ AS FLOAT)*100/PPRIM_POLLUTE_TOTLE,2) AS VARCHAR)+'%' ELSE '-' END as PRIM_POLLUTE_ZQL,
			CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(AQI_LEVEL_MZ AS FLOAT)*100/YBTS,2) AS VARCHAR)+'%'  ELSE '-' END as AQI_LEVEL_MZL,
			CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(AQI_LEVEL_ZQ AS FLOAT)*100/YBTS,2) AS VARCHAR)+'%'  ELSE '-' END as AQI_LEVEL_ZQL,
			CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_ZQ AS FLOAT)*100/ZDWR_ALL,2)AS VARCHAR)+'%' ELSE '-' END as ZDWR_ZQL,
			CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_WB AS FLOAT)*100/ZDWR_ALL,2) AS VARCHAR)+'%' ELSE '-' END as ZDWR_WBL,
			CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_KB AS FLOAT)*100/ZDWR_ALL,2) AS VARCHAR)+'%' ELSE '-' END as ZDWR_KBL,
			CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(AQIC AS FLOAT)*100/YBTS,2)AS VARCHAR) +'%'  ELSE '-' END AS AQI_MZL,
			ISNULL(AQI_YCBZC,'-') AS AQI_YCBZC ,
			ISNULL(AQI_SCBZC,'-') AS AQI_SCBZC ,
			CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(PM25C AS FLOAT)*100/YBTS,2)AS VARCHAR) +'%'  ELSE '-' END AS PM25_MZL,
			ISNULL(PM25_YCBZC,'-') AS PM25_YCBZC ,
			ISNULL(PM25_SCBZC,'-') AS PM25_SCBZC ,
			CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(O3C AS FLOAT)*100/YBTS,2)AS VARCHAR) +'%'  ELSE '-' END AS O3_MZL,
			ISNULL(O3_YCBZC,'-') AS O3_YCBZC ,
			ISNULL(O3_SCBZC,'-') AS O3_SCBZC
		FROM(
			SELECT
				B.STEP,
				-- 预报有效天数
				CAST(COUNT(CASE WHEN A.AQI_MEDIAN IS NOT NULL THEN 1 END)AS VARCHAR) AS YBTS,
				-- 首要污染物预报准确次数
				COUNT(CASE WHEN C.CODE_AQILEVEL>=2 and dbo.judge_prim_contain(A.PRIM_POLLUTE,C.PRIMARYPOLLUTANT)=1 THEN 1 END) AS PPRIM_POLLUTE_ZQ,
				-- 实测有首要污染物次数
				COUNT(CASE WHEN C.CODE_AQILEVEL>=2 THEN 1 END) AS PPRIM_POLLUTE_TOTLE,
				-- 空气质量等级预报命中次数
				SUM(
				CASE
					WHEN A.AQI_LEVEL=C.AQISTATIONNAME THEN 1
					WHEN replace(A.AQI_LEVEL,'污染','') like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 0.5
					ELSE 0
				END
			)  AS AQI_LEVEL_MZ,
				-- 空气质量等级预报准确次数
				COUNT(CASE WHEN replace(A.AQI_LEVEL,'污染','') like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS AQI_LEVEL_ZQ,
				-- 重度污染总天数
				COUNT(CASE WHEN C.CODE_AQILEVEL>=5 THEN 1 END) AS ZDWR_ALL,
				-- 重度污染准确次数
				COUNT(CASE WHEN C.CODE_AQILEVEL>=5 AND A.AQI_LEVEL IS NOT NULL AND replace(A.AQI_LEVEL,'污染','')  like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS ZDWR_ZQ,
				-- 重度污染误报次数
				COUNT(CASE WHEN C.CODE_AQILEVEL>=5 AND A.AQI_LEVEL IS NOT NULL AND replace(A.AQI_LEVEL,'污染','')  NOT like '%'+replace(C.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS ZDWR_WB,
				-- 重度污染空报次数
				COUNT(CASE WHEN C.CODE_AQILEVEL>=5 AND A.AQI_LEVEL IS  NULL THEN 1 END) AS ZDWR_KB,
				--AQI
				COUNT(CASE WHEN A.AQI_MEDIAN IS NULL OR C.AQI IS NULL THEN null WHEN C.AQI  BETWEEN A.AQI_MIN  AND  A.AQI_MAX THEN 1 END ) AS AQIC,
				CASE WHEN COUNT(CASE WHEN A.AQI_MEDIAN  IS NOT NULL THEN 1 END) > 1 THEN CAST(ROUND(SQRT(SUM(SQUARE(A.AQI_MEDIAN- D.AVGAQI_YB))/(COUNT(CASE WHEN A.AQI_MEDIAN IS NOT NULL THEN 1 END)-1)),2) AS VARCHAR) ELSE '-' END AS AQI_YCBZC,
				CASE WHEN COUNT(CASE WHEN A.AQI_MEDIAN IS NOT NULL THEN 1 END) > 1 THEN CAST(ROUND(SQRT(SUM(SQUARE(C.AQI-D.AVGAQI_SC))/(COUNT(CASE WHEN A.AQI_MEDIAN IS NOT NULL THEN 1 END)-1)),2) AS VARCHAR) ELSE '-' END AS AQI_SCBZC,

				--PM25
				COUNT(CASE WHEN A.PM25_MEDIAN IS NULL OR C.PM2_5 IS NULL THEN null WHEN C.PM2_5  BETWEEN A.PM25_MIN  AND  A.PM25_MAX THEN 1 END) AS PM25C,
				CASE WHEN COUNT(CASE WHEN A.PM25_MEDIAN IS NOT NULL THEN 1 END) > 1 THEN CAST(ROUND(SQRT(SUM(SQUARE(A.PM25_MEDIAN- D.AVGPM25_YB))/(COUNT(CASE WHEN A.PM25_MEDIAN IS NOT NULL THEN 1 END)-1)),2) AS VARCHAR) ELSE '-' END AS PM25_YCBZC,
				CASE WHEN COUNT(CASE WHEN A.PM25_MEDIAN IS NOT NULL THEN 1 END) > 1 THEN CAST(ROUND(SQRT(SUM(SQUARE(C.PM2_5-D.AVGPM25_SC))/(COUNT(CASE WHEN A.PM25_MEDIAN IS NOT NULL THEN 1 END)-1)),2) AS VARCHAR) ELSE '-' END AS PM25_SCBZC,
				--O3
				COUNT(CASE WHEN A.O3_MEDIAN IS NULL OR C.O3_8 IS NULL THEN null WHEN C.O3_8  BETWEEN A.O3_MIN  AND  A.O3_MAX THEN 1 END) O3C,
				CASE WHEN COUNT(CASE WHEN A.O3_MEDIAN IS NOT NULL THEN 1 END) > 1 THEN CAST(ROUND(SQRT(SUM(SQUARE(A.O3_MEDIAN- D.AVGO3_YB))/(COUNT(CASE WHEN A.O3_MEDIAN IS NOT NULL THEN 1 END)-1)),2) AS VARCHAR) ELSE '-' END AS O3_YCBZC,
				CASE WHEN COUNT(CASE WHEN A.O3_MEDIAN IS NOT NULL THEN 1 END) > 1 THEN CAST(ROUND(SQRT(SUM(SQUARE(C.O3_8-D.AVGO3_SC))/(COUNT(CASE WHEN A.O3_MEDIAN IS NOT NULL THEN 1 END)-1)),2) AS VARCHAR) ELSE '-' END AS O3_SCBZC
			FROM
			(
			SELECT * FROM
				(
					SELECT DATEADD(DAY,number, #{START_TIME}) V_RESULT_TIME
					FROM master..spt_values
					WHERE type = 'p' AND number between 0 and DATEDIFF(DAY, #{START_TIME}, #{END_TIME})
				) A
			INNER JOIN (SELECT v_result as step from [DBO].GENERATE_SERIES(1,7,1))B ON 1=1
			) B
			LEFT JOIN   XA A ON B.V_RESULT_TIME = A.RESULT_TIME AND B.STEP=A.STEP
			LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY C  ON B.V_RESULT_TIME = C.MONITORTIME AND C.CODE_REGION ='510100000000'
			LEFT JOIN (
			-- 每个步长的预报和测试平均值
			<foreach collection="avgDataList" item="item" separator=" union all ">
				SELECT
				#{item.STEP} as STEP
				,#{item.AVGAQI_YB} as AVGAQI_YB
				,#{item.AVGPM25_YB} as AVGPM25_YB
				,#{item.AVGO3_YB} as AVGO3_YB
				,#{item.AVGAQI_SC} as AVGAQI_SC
				,#{item.AVGPM25_SC} as AVGPM25_SC
				,#{item.AVGO3_SC} as AVGO3_SC
			</foreach>
			) D ON B.STEP=D.STEP GROUP BY B.STEP
		) T ORDER BY STEP
	</select>

	<!-- 获取预报模式类型 -->
	<select id="getForecastModel" resultType="java.util.Map">
		SELECT MODEL AS code,MODELNAME AS name,STEP AS step FROM  [AIR_FORECAST].[T_BAS_MODELS] WHERE STATE = 1 order by ORDERNO
	</select>

	<!-- 获取模型预报核对数据 -->
	<select id="queryModelForecastCheckData" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT
			CONVERT(VARCHAR(13),GENERATE_SERIES_TIME,120) AS REPORT_TIME,
			CONVERT(VARCHAR(10),V_RESULT_TIME,23) AS RESULT_TIME,
			B.AQI,
			MINAQI,
			MAXAQI,
			AVGAQI,

			B.PM25,
			MINPM25,
			MAXPM25,
			AVGPM25,

			B.O3,
			MINO3,
			MAXO3,
			AVGO3,

			B.AQI_LEVEL,
			B.PRIM_POLLUTE,

			C.AQI SKAQI,
			C.PM2_5 SKPM25,
			C.O3_8 SKO3,
			C.AQISTATIONNAME AQILEVELSTATE,
			C.PRIMARYPOLLUTANT SPRIMPOLLUTE,
			CASE WHEN B.AQI IS NULL OR C.AQI IS NULL THEN null WHEN C.AQI  BETWEEN MINAQI  AND  MAXAQI THEN '1' ELSE '0' END AQIC,
			CASE WHEN B.PM25 IS NULL OR C.PM2_5 IS NULL THEN null WHEN C.PM2_5  BETWEEN MINPM25  AND  MAXPM25 THEN '1' ELSE '0' END PM25C,
			CASE WHEN B.O3 IS NULL OR C.O3_8 IS NULL THEN null WHEN C.O3_8  BETWEEN MINO3  AND  MAXO3 THEN '1' ELSE '0' END O3C
		FROM (
				 SELECT
					 DATEADD(DAY,V_RESULT, #{START_TIME}) V_RESULT_TIME,
					<choose>
						<when test='timeType !=null and timeType!="" and timeType == "12"'>
							DATEADD(DAY,V_RESULT, #{START_TIME}+' 12:00:00') - ${TIME_STEP} GENERATE_SERIES_TIME
						</when>
						<otherwise>
							DATEADD(DAY,V_RESULT, #{START_TIME}) - ${TIME_STEP} GENERATE_SERIES_TIME
						</otherwise>
					</choose>
				 FROM
					 [DBO].GENERATE_SERIES(0, DATEDIFF(DAY, #{START_TIME}, #{END_TIME}), 1)
			 ) A LEFT JOIN (
			SELECT
				A.AQI,
				AIR_FORECAST.GETAQIRANGEMIN(A.AQI) AS  MINAQI,
				AIR_FORECAST.GETAQIRANGEMAX(A.AQI) AS   MAXAQI,
				(cast (AIR_FORECAST.GETAQIRANGEMIN(A.AQI) AS decimal(10,2)) +cast(AIR_FORECAST.GETAQIRANGEMAX(A.AQI) AS DECIMAL(10,2)))/2 AVGAQI,
				A.PM25,
				AIR_FORECAST.GETPM25RANGEMIN(A.PM25) AS MINPM25,
				AIR_FORECAST.GETPM25RANGEMAX(A.PM25) AS MAXPM25,
				(cast (AIR_FORECAST.GETPM25RANGEMIN(A.PM25) AS decimal(10,2)) +cast(AIR_FORECAST.GETPM25RANGEMAX(A.PM25) AS DECIMAL(10,2)))/2 AVGPM25,
				A.O3_8 AS O3,
				AIR_FORECAST.GETO3RANGEMIN(A.O3_8) AS MINO3,
				AIR_FORECAST.GETO3RANGEMAX(A.O3_8) AS MAXO3,
				(cast (AIR_FORECAST.GETO3RANGEMIN(A.O3_8) AS decimal(10,2)) +cast(AIR_FORECAST.GETO3RANGEMAX(A.O3_8) AS DECIMAL(10,2)))/2 AVGO3,
				A.AQILEVELSTATE AS AQI_LEVEL,
				A.PRIMPOLLUTE AS PRIM_POLLUTE,
				A.RESULTTIME AS RESULT_TIME,
				A.MODELTIME AS REPORT_TIME,
				ROW_NUMBER() OVER(PARTITION BY RESULTTIME,MODELTIME ORDER BY RESULTTIME DESC) RN,
					A.STEP
			FROM
				AIR_FORECAST.T_BAS_MODELWQ_DAY_ROW A
			WHERE POINTCODE=#{pointCode} AND MODEL= #{modelName}
		) B
						   ON A.GENERATE_SERIES_TIME = B.REPORT_TIME
							   AND RN = 1
							   AND STEP = #{TIME_STEP}
				 LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY  C
						   ON A.V_RESULT_TIME = C.MONITORTIME
							   AND C.CODE_REGION ='510100000000'
	</select>

	<!--模型预报根据step,求预报及实测平均值-->
	<select id="queryModelAvgData" resultType="java.util.Map">
		SELECT
			B.STEP,
			AVG ( CAST( A.AQI AS DECIMAL(10,2))) AS AVGAQI_YB,
			AVG ( CAST( A.PM25 AS DECIMAL(10,2))) AS AVGPM25_YB,
			AVG ( CAST( A.O3_8 AS DECIMAL(10,2))) AS AVGO3_YB,
			AVG ( C.PM2_5 ) AS AVGPM25_SC,
			AVG ( C.AQI ) AS AVGAQI_SC,
			AVG ( C.O3_8 ) AS AVGO3_SC
		FROM
			(-- 连续时间数据
				SELECT * FROM
					(
						SELECT DATEADD(DAY,number, #{START_TIME}) V_RESULT_TIME
						FROM master..spt_values
						WHERE type = 'p' AND number between 0 and DATEDIFF(DAY, #{START_TIME}, #{END_TIME})
					) A
						INNER JOIN (SELECT v_result as step from [DBO].GENERATE_SERIES(1,${days},1))B ON 1=1
			) B
		LEFT JOIN AIR_FORECAST.T_BAS_MODELWQ_DAY_ROW A ON A.RESULTTIME=B.V_RESULT_TIME AND A.STEP=B.STEP
				AND A.POINTCODE=#{pointCode}
				AND A.MODEL= #{modelName}
				AND A.MODELTIME = CONVERT(VARCHAR(10),DATEADD(DAY,-B.STEP,B.V_RESULT_TIME),23)
				<choose>
					<when test='timeType !=null and timeType!="" and timeType == "12"'>
						+' 12:00:00'
					</when>
					<otherwise>
						+' 00:00:00'
					</otherwise>
				</choose>
		LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY C ON B.V_RESULT_TIME = C.MONITORTIME AND C.CODE_REGION = '510100000000'
		GROUP BY B.STEP
	</select>

	<!--获取模型预报表格数据-->
	<select id="queryModelForecastTableData" resultType="java.util.LinkedHashMap" parameterType="java.util.Map">
		select
			STEP,
				ISNULL(YBTS,'-') AS YBTS,
				CASE WHEN PPRIM_POLLUTE_TOTLE !=0 THEN CAST(ROUND(CAST(PPRIM_POLLUTE_ZQ AS FLOAT)*100/PPRIM_POLLUTE_TOTLE,2) AS VARCHAR)+'%' ELSE '-' END as PRIM_POLLUTE_ZQL,
				CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(AQI_LEVEL_ZQ AS FLOAT)*100/YBTS,2) AS VARCHAR)+'%'  ELSE '-' END as AQI_LEVEL_ZQL,
				CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(AQI_LEVEL_MZ AS FLOAT)*100/YBTS,2) AS VARCHAR)+'%'  ELSE '-' END as AQI_LEVEL_MZL,
				CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_ZQ AS FLOAT)*100/ZDWR_ALL,2)AS VARCHAR)+'%' ELSE '-' END as ZDWR_ZQL,
				CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_WB AS FLOAT)*100/ZDWR_ALL,2) AS VARCHAR)+'%' ELSE '-' END as ZDWR_WBL,
				CASE WHEN ZDWR_ALL !=0 THEN CAST(ROUND(CAST(ZDWR_KB AS FLOAT)*100/ZDWR_ALL,2) AS VARCHAR)+'%' ELSE '-' END as ZDWR_KBL,

				CASE
					WHEN YBTS !=0 AND AQI_YCBZC !=0 AND AQI_SCBZC !=0 THEN CAST(ROUND(AQI_COV/(YBTS*AQI_YCBZC*AQI_SCBZC),2) AS VARCHAR)
					ELSE '-'
				END AS AQI_XGX,
				CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(AQIC AS FLOAT)*100/YBTS,2)AS VARCHAR) +'%'  ELSE '-' END AS AQI_MZL,
				CASE WHEN AQI_BZHPJPC IS NULL THEN '-' ELSE  SUBSTRING( AQI_BZHPJPC, 1, charindex( '.', AQI_BZHPJPC ) + 2) END AS AQI_BZHPJPC,
				CASE WHEN AQI_JFGWC IS NULL THEN '-' ELSE  SUBSTRING( AQI_JFGWC, 1, charindex( '.', AQI_JFGWC ) + 2) END AS AQI_JFGWC,

				CASE
					WHEN YBTS !=0 AND PM25_YCBZC !=0 AND PM25_SCBZC !=0 THEN CAST(ROUND(PM25_COV/(YBTS*PM25_YCBZC*PM25_SCBZC),2) AS VARCHAR)
					ELSE '-'
				END AS PM25_XGX,
				CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(PM25C AS FLOAT)*100/YBTS,2)AS VARCHAR) +'%'  ELSE '-' END AS PM25_MZL,
				CASE WHEN PM25_BZHPJPC IS NULL THEN '-' ELSE  SUBSTRING( PM25_BZHPJPC, 1, charindex( '.', PM25_BZHPJPC ) + 2) END AS PM25_BZHPJPC,
				CASE WHEN PM25_JFGWC IS NULL THEN '-' ELSE  SUBSTRING( PM25_JFGWC, 1, charindex( '.', PM25_JFGWC ) + 2) END AS PM25_JFGWC,

				CASE
					WHEN YBTS !=0 AND O3_YCBZC !=0 AND O3_SCBZC !=0 THEN CAST(ROUND(O3_COV/(YBTS*O3_YCBZC*O3_SCBZC),2) AS VARCHAR)
					ELSE '-'
				END AS O3_XGX,
				CASE WHEN YBTS !=0 THEN CAST(ROUND(CAST(O3C AS FLOAT)*100/YBTS,2)AS VARCHAR) +'%'  ELSE '-' END AS O3_MZL,
				CASE WHEN O3_BZHPJPC IS NULL THEN '-' ELSE SUBSTRING( O3_BZHPJPC, 1, charindex( '.', O3_BZHPJPC ) + 2) END AS O3_BZHPJPC,
				CASE WHEN O3_JFGWC IS NULL THEN '-' ELSE SUBSTRING(O3_JFGWC, 1, charindex( '.',O3_JFGWC ) + 2) END AS O3_JFGWC
			FROM (
				SELECT
					STEP,
					CAST(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) AS VARCHAR) AS YBTS,
					-- 首要污染物预报准确次数
					COUNT(CASE WHEN T.CODE_AQILEVEL>=2 and dbo.judge_prim_contain(T.PRIM_POLLUTE,T.PRIMARYPOLLUTANT)=1 THEN 1 END) AS PPRIM_POLLUTE_ZQ,
					-- 实测有首要污染物次数
					COUNT(CASE WHEN T.CODE_AQILEVEL>=2 THEN 1 END) AS PPRIM_POLLUTE_TOTLE,

					-- 空气质量等级预报命中次数
					SUM(
					CASE
						WHEN T.AQI_LEVEL=T.AQISTATIONNAME THEN 1
						WHEN replace(T.AQI_LEVEL,'污染','') like '%'+replace(T.AQISTATIONNAME,'污染','')+'%' THEN 0.5
						ELSE 0
					END
					)  AS AQI_LEVEL_MZ,
					-- 空气质量等级预报准确次数
					COUNT(CASE WHEN replace(T.AQI_LEVEL,'污染','') like '%'+replace(T.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS AQI_LEVEL_ZQ,
					-- 重度污染总天数
					COUNT(CASE WHEN T.CODE_AQILEVEL>=5 THEN 1 END) AS ZDWR_ALL,
					-- 重度污染准确次数
					COUNT(CASE WHEN T.CODE_AQILEVEL>=5 AND T.AQI_LEVEL IS NOT NULL AND replace(T.AQI_LEVEL,'污染','')  like '%'+replace(T.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS ZDWR_ZQ,
					-- 重度污染误报次数
					COUNT(CASE WHEN T.CODE_AQILEVEL>=5 AND T.AQI_LEVEL IS NOT NULL AND replace(T.AQI_LEVEL,'污染','')  NOT like '%'+replace(T.AQISTATIONNAME,'污染','')+'%' THEN 1 END) AS ZDWR_WB,
					-- 重度污染空报次数
					COUNT(CASE WHEN T.CODE_AQILEVEL>=5 AND T.AQI_LEVEL IS  NULL THEN 1 END) AS ZDWR_KB,

					--AQI
					-- 相关性(COV)
					SUM((AQI- AVGAQI_YB)*(AQI_SC-AVGAQI_SC)) AS AQI_COV,
					-- 预测标准差
					CASE WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(AQI- AVGAQI_YB))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS AQI_YCBZC,
					-- 实测标准差
					CASE WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(AQI_SC-AVGAQI_SC))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS AQI_SCBZC,
					COUNT(CASE WHEN AQI IS NULL OR AQI_SC IS NULL THEN null WHEN AQI_SC  BETWEEN MINAQI  AND  MAXAQI THEN 1 END ) AS AQIC,
					CASE
					WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) = 0 THEN '-'
						ELSE CAST(ROUND((SUM(AQI-AQI_SC)/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)))/(SUM(AQI_SC)/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END))),2)AS VARCHAR)
					END AS AQI_BZHPJPC,
					CASE
					WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) = 0 THEN '-'
						ELSE CAST(ROUND(SQRT(SUM(SQUARE(AQI-AQI_SC))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END))),2)AS VARCHAR)
					END AS AQI_JFGWC,

					--PM25
					-- 相关性(COV)
					SUM((PM25- AVGPM25_YB)*(PM2_5-AVGPM25_SC)) AS PM25_COV,
					-- 预测标准差
					CASE WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(PM25- AVGPM25_YB))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS PM25_YCBZC,
					-- 实测标准差
					CASE WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(PM2_5-AVGPM25_SC))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS PM25_SCBZC,
					COUNT(CASE WHEN PM25 IS NULL OR PM2_5 IS NULL THEN null WHEN PM2_5  BETWEEN MINPM25  AND  MAXPM25 THEN 1 END) AS PM25C,
					CASE
					WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) = 0 THEN '-'
						ELSE CAST(ROUND((SUM(PM25-PM2_5)/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)))/(SUM(PM2_5)/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END))),2)AS VARCHAR)
					END AS PM25_BZHPJPC,
					CASE
					WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) = 0 THEN '-'
						ELSE CAST(ROUND(SQRT(SUM(SQUARE(PM25-PM2_5))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END))),2)AS VARCHAR)
					END AS PM25_JFGWC,

					--O3
					-- 相关性(COV)
					SUM((O3- AVGO3_YB)*(O3_8-AVGO3_SC)) AS O3_COV,
					-- 预测标准差
					CASE WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(O3- AVGO3_YB))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS O3_YCBZC,
					-- 实测标准差
					CASE WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) > 1 THEN SQRT(SUM(SQUARE(O3_8-AVGO3_SC))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)-1)) ELSE NULL END AS O3_SCBZC,
					COUNT(CASE WHEN O3 IS NULL OR O3_8 IS NULL THEN null WHEN O3_8  BETWEEN MINO3  AND  MAXO3 THEN '1' END) O3C,
					CASE
					WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) = 0 THEN '-'
						ELSE CAST(ROUND((SUM(O3-O3_8)/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END)))/(SUM(O3_8)/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END))),2)AS VARCHAR)
					END AS O3_BZHPJPC,
					CASE
					WHEN COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END) = 0 THEN '-'
						ELSE CAST(ROUND(SQRT(SUM(SQUARE(O3-O3_8))/(COUNT(CASE WHEN AQI IS NOT NULL THEN 1 END))),2)AS VARCHAR)
					END AS O3_JFGWC
				FROM(
					SELECT
						B.STEP,
						A.AQI,
						AIR_FORECAST.GETAQIRANGEMIN(A.AQI) AS  MINAQI,
						AIR_FORECAST.GETAQIRANGEMAX(A.AQI) AS  MAXAQI,

						A.PM25,
						AIR_FORECAST.GETPM25RANGEMIN(A.PM25) AS MINPM25,
						AIR_FORECAST.GETPM25RANGEMAX(A.PM25) AS MAXPM25,

						A.O3,
						AIR_FORECAST.GETO3RANGEMIN(A.O3) AS MINO3,
						AIR_FORECAST.GETO3RANGEMAX(A.O3) AS MAXO3,

						A.AQILEVELSTATE AS AQI_LEVEL,
						CASE WHEN A.PRIMPOLLUTE='O3' THEN 'O3_8' ELSE A.PRIMPOLLUTE END AS PRIM_POLLUTE,
						C.AQI AS AQI_SC,
						C.PM2_5,
						C.O3_8,
						C.CODE_AQILEVEL,
						C.AQISTATIONNAME,
						C.PRIMARYPOLLUTANT,
						D.AVGPM25_YB,
						D.AVGPM25_SC,
						D.AVGAQI_YB,
						D.AVGAQI_SC,
						D.AVGO3_YB,
						D.AVGO3_SC
					FROM(
					-- 连续时间数据
						SELECT * FROM(
							SELECT DATEADD(DAY,number, #{START_TIME}) V_RESULT_TIME
							FROM master..spt_values
							WHERE type = 'p' AND number between 0 and DATEDIFF(DAY, #{START_TIME},#{END_TIME})
							) A
						INNER JOIN (SELECT v_result as step from [DBO].GENERATE_SERIES(1,${days},1))B ON 1=1
						) B
						LEFT JOIN AIR_FORECAST.T_BAS_MODELWQ_DAY_ROW A ON B.V_RESULT_TIME=A.RESULTTIME AND A.STEP=B.STEP
						AND A.POINTCODE=#{pointCode}
						AND A.MODEL= #{modelName}
						AND A.MODELTIME = CONVERT(VARCHAR(10),DATEADD(DAY,-B.STEP,B.V_RESULT_TIME),23)
						<choose>
							<when test='timeType !=null and timeType!="" and timeType == "12"'>
								+' 12:00:00'
							</when>
							<otherwise>
								+' 00:00:00'
							</otherwise>
						</choose>
						LEFT JOIN TENVAIR.T_ENV_AIRDATA_REGION_DAY C  ON B.V_RESULT_TIME = C.MONITORTIME AND C.CODE_REGION ='510100000000'
						LEFT JOIN (
						-- 每个步长的预报和测试平均值
						<foreach collection="avgDataList" item="item" separator=" union all ">
							SELECT
							#{item.STEP} as STEP
							,#{item.AVGAQI_YB} as AVGAQI_YB
							,#{item.AVGPM25_YB} as AVGPM25_YB
							,#{item.AVGO3_YB} as AVGO3_YB
							,#{item.AVGAQI_SC} as AVGAQI_SC
							,#{item.AVGPM25_SC} as AVGPM25_SC
							,#{item.AVGO3_SC} as AVGO3_SC
						</foreach>
						) D ON B.STEP=D.STEP
					) T GROUP BY T.STEP
			)B  ORDER BY STEP
	</select>

	<select id="getForecastCountyTableData"  resultType="java.util.LinkedHashMap" parameterType="java.util.Map">

		WITH BBB AS (
			SELECT  AAA.REGIONNAME,STEP,
			SUM( CASE WHEN B.AQI > AAA.AQI_START <![CDATA[ AND B.AQI < AQI_END  ]]> THEN 1 ELSE 0 END ) ZQAQI,
            SUM (CASE WHEN  dbo.FN_GET_LEVELINFO('aqi','pulllevelname',AAA.AQI_START) =AQISTATIONNAME or dbo.FN_GET_LEVELINFO('aqi','pulllevelname',AAA.AQI_end)  =AQISTATIONNAME  THEN 1 ELSE 0 END) ZQLEVEL,
			SUM( CASE WHEN B.PRIMARYPOLLUTANT LIKE '%'+ AAA.PULLNAME+'%' THEN 1 ELSE 0 END) ZQSW,
			COUNT(0) ALLN
			FROM (
				SELECT [PKID], [AREA_PKID], [REGIONCODE], [REGIONNAME], [CREATE_TIME], [FORECAST_DATE1] AS FORECAST_DATE, [AQI_START1] AS AQI_START,
				[AQI_END1] AS AQI_END, [PULLNAME1] AS PULLNAME,DATEDIFF(DAY,CREATE_TIME,FORECAST_DATE1) STEP
				FROM [DBO].[T_ANS_FLOW_AREA_3D] WHERE CREATE_TIME > CONVERT(DATETIME,#{startTime},120)<![CDATA[ AND CREATE_TIME < CONVERT(DATETIME,#{endTime},120)]]>
				UNION ALL
				SELECT [PKID], [AREA_PKID], [REGIONCODE], [REGIONNAME], [CREATE_TIME],[FORECAST_DATE2], [AQI_START2], [AQI_END2], [PULLNAME2],DATEDIFF(DAY,CREATE_TIME,FORECAST_DATE2) STEP
				FROM [DBO].[T_ANS_FLOW_AREA_3D] WHERE CREATE_TIME > CONVERT(DATETIME,#{startTime},120) <![CDATA[ AND CREATE_TIME < CONVERT(DATETIME,#{endTime},120)]]>
				UNION ALL
				SELECT [PKID], [AREA_PKID], [REGIONCODE], [REGIONNAME], [CREATE_TIME], [FORECAST_DATE3], [AQI_START3], [AQI_END3], [PULLNAME3],DATEDIFF(DAY,CREATE_TIME,FORECAST_DATE3) STEP
				FROM [DBO].[T_ANS_FLOW_AREA_3D] WHERE CREATE_TIME > CONVERT(DATETIME,#{startTime},120) <![CDATA[ AND CREATE_TIME < CONVERT(DATETIME,#{endTime},120)]]>
			) AAA
			LEFT JOIN T_ANS_GENERAL_REPORT C ON AAA.AREA_PKID = C.REPORT_ID AND C.STATE = 'UPLOAD'
			LEFT JOIN (SELECT AQI,replace(PRIMARYPOLLUTANT,'O3_8','O3') PRIMARYPOLLUTANT,AQISTATIONNAME,MONITORTIME,REGIONNAME FROM TENVAIR.T_ENV_AIRDATA_REGION_DAY WHERE MONITORTIME > CONVERT(DATETIME,#{startTime},120) <![CDATA[  AND MONITORTIME < CONVERT(DATETIME,#{endTime},120)]]> )B ON
			AAA.FORECAST_DATE = B.MONITORTIME AND AAA.REGIONNAME = B.REGIONNAME GROUP BY AAA.REGIONNAME,STEP
		)
		SELECT
			REGION_NAME,
            STR(ZQAQI1,8,1)+'%' ZQAQI1,
            STR(ZQLEVEL1,8,1)+'%' ZQLEVEL1,
            STR(ZQSW1,8,1)+'%' ZQSW1,
            STR(ZQAQI2,8,1)+'%' ZQAQI2,
            STR(ZQLEVEL2,8,1)+'%' ZQLEVEL2,
            STR(ZQSW2,8,1)+'%' ZQSW2,
            STR(ZQAQI3,8,1)+'%' ZQAQI3,
            STR(ZQLEVEL3,8,1)+'%' ZQLEVEL3,
            STR(ZQSW3,8,1)+'%' ZQSW3
		FROM (
			SELECT REGION_CODE,REGION_NAME,SORT FROM [DBO].[T_COMM_REGION] WHERE REGION_TYPE = 'COUNTY' AND PARENT_CODE='510100000000' AND REGION_CODE!= '512082000000'
			UNION ALL
			SELECT '','合计',999
		) A LEFT JOIN(
			SELECT
				REGIONNAME,
				MAX(ROUND(CASE  WHEN STEP = 1 THEN CAST(ZQAQI AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1) ) ZQAQI1,
				MAX(ROUND(CASE  WHEN STEP = 1 THEN CAST(ZQLEVEL AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1) ) ZQLEVEL1,
				MAX(ROUND(CASE  WHEN STEP = 1 THEN CAST(ZQSW AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1) ) ZQSW1,
				MAX(ROUND(CASE  WHEN STEP = 2 THEN CAST(ZQAQI AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END ,1)) ZQAQI2,
				MAX(ROUND(CASE  WHEN STEP = 2 THEN CAST(ZQLEVEL AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1) ) ZQLEVEL2,
				MAX(ROUND(CASE  WHEN STEP = 2 THEN CAST(ZQSW AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1) ) ZQSW2,
				MAX(ROUND(CASE  WHEN STEP = 3 THEN CAST(ZQAQI AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1) ) ZQAQI3,
				MAX(ROUND(CASE  WHEN STEP = 3 THEN CAST(ZQLEVEL AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END ,1)) ZQLEVEL3,
				MAX(ROUND(CASE  WHEN STEP = 3 THEN CAST(ZQSW AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1) ) ZQSW3
			FROM  BBB GROUP BY REGIONNAME
			UNION ALL
			SELECT
				'合计',
				 MAX(ROUND(CASE  WHEN STEP = 1 THEN CAST(ZQAQI AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQAQI1 ,
				 MAX(ROUND(CASE  WHEN STEP = 1 THEN CAST(ZQLEVEL AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQLEVEL1,
				 MAX(ROUND(CASE  WHEN STEP = 1 THEN CAST(ZQSW AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQSW1,
				 MAX(ROUND(CASE  WHEN STEP = 2 THEN CAST(ZQAQI AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQAQI2 ,
				 MAX( ROUND(CASE  WHEN STEP = 2 THEN CAST(ZQLEVEL AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQLEVEL2,
				 MAX( ROUND(CASE  WHEN STEP = 2 THEN CAST(ZQSW AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQSW2,
				 MAX(ROUND(CASE  WHEN STEP = 3 THEN CAST(ZQAQI AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQAQI3 ,
				 MAX(ROUND(CASE  WHEN STEP = 3 THEN CAST(ZQLEVEL AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQLEVEL3,
				 MAX(ROUND(CASE  WHEN STEP = 3 THEN CAST(ZQSW AS DECIMAL) / CAST(ALLN AS DECIMAL) *100 END,1)) ZQSW3
			 FROM (
				SELECT STEP,SUM(ZQAQI) ZQAQI,SUM(ZQLEVEL) ZQLEVEL,SUM(ZQSW) ZQSW,SUM(ALLN) ALLN FROM BBB GROUP BY  STEP
				) T1
		) B ON A.REGION_NAME =B.REGIONNAME ORDER BY A.SORT


	</select>

</mapper>