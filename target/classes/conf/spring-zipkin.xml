<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-3.2.xsd">
	<context:property-placeholder/>

	<!-- 发送器配置，对应zipkin环境，使用http的形式将编码后的二进制数据，发送给Zipkin -->
	<bean id="sender" class="zipkin2.reporter.beans.OkHttpSenderFactoryBean">
		<property name="endpoint" value="${spring.ths.nacos.zipkin.sender.endpoint}"/>
	</bean>

	<!-- 配置如何在Zipkin中缓冲消息,zipkin调优时的重要属性 -->
	<bean id="zipkinSpanHandler" class="zipkin2.reporter.beans.AsyncZipkinSpanHandlerFactoryBean">
		<property name="sender" ref="sender"/>
		<!-- 一个span阻塞的最长时间，默认为1秒 -->
		<property name="closeTimeout" value="1"/>
		<!-- 阻塞队列的最大数量限制 -->
		<property name="queuedMaxSpans" value="10000"/>
		<!-- 每个消息可发送的最大字节数，默认500000字节，500kb -->
		<property name="messageMaxBytes" value="500000"/>
		<!-- 发送之前等待messageMaxBytes累积的最长时间。默认1秒 -->
		<property name="messageTimeout" value="1"/>
		<!-- 消息的最大积压,默认为堆内存的1％ AsyncReporter.onePercentOfMemory() -->
<!--		<property name="queuedMaxBytes" value=""/>-->
	</bean>

	<!-- 采样配置，通过sampler来减少收集和报告的非过程数据 -->
	<bean id="sampler" class="brave.sampler.CountingSampler">
		<!-- 采样率配置 -->
		<constructor-arg value="1f"/>
	</bean>

	<!-- baggage 与logging整合输出日志 %{traceId} %{spanId} -->
	<bean id="correlationScopeDecorator" class="brave.spring.beans.CorrelationScopeDecoratorFactoryBean">
		<property name="builder">
			<bean class="brave.context.log4j12.MDCScopeDecorator" factory-method="newBuilder"/>
		</property>
		<property name="configs">
			<list>
				<bean class="brave.spring.beans.SingleCorrelationFieldFactoryBean">
					<property name="baggageField">
						<util:constant static-field="brave.baggage.BaggageFields.TRACE_ID"/>
					</property>
				</bean>
				<bean class="brave.spring.beans.SingleCorrelationFieldFactoryBean">
					<property name="baggageField">
						<util:constant static-field="brave.baggage.BaggageFields.SPAN_ID"/>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<!-- 控制跟踪方面，UI中显示的服务名称等 -->
	<bean id="tracing" class="brave.spring.beans.TracingFactoryBean">
		<!-- 注册的服务名 -->
		<property name="localServiceName" value="${jdp.app.code}"/>
		<!-- 当前trace的上下文 -->
		<property name="currentTraceContext">
			<bean class="brave.spring.beans.CurrentTraceContextFactoryBean">
				<!-- 日志 -->
				<property name="scopeDecorators" ref="correlationScopeDecorator"/>
			</bean>
		</property>
		<property name="spanHandlers" ref="zipkinSpanHandler"/>
		<property name="sampler" ref="sampler"/>
	</bean>
	<!-- 初始化span -->
	<bean id="spanCustomizer" class="brave.CurrentSpanCustomizer" factory-method="create">
		<constructor-arg index="0" ref="tracing"/>
	</bean>
	<!-- httpTracing -->
	<bean id="httpTracing" class="brave.spring.beans.HttpTracingFactoryBean">
		<property name="tracing" ref="tracing"/>
	</bean>
	<!-- rpcTracing -->
	<bean id="rpcTracing" class="brave.spring.beans.RpcTracingFactoryBean">
		<property name="tracing" ref="tracing"/>
	</bean>
	<!-- restTemplateTracing -->
	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<property name="interceptors">
			<!-- 添加拦截器 -->
			<list>
				<bean class="brave.spring.web.TracingClientHttpRequestInterceptor" factory-method="create">
					<constructor-arg type="brave.http.HttpTracing" ref="httpTracing"/>
				</bean>
			</list>
		</property>
	</bean>
</beans>
