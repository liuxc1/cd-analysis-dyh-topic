package ${exportInfo.servicePackage};

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Service;
#if(${exportInfo.subInfo.size()} > 0)
import org.springframework.transaction.annotation.Transactional;
#end

import ths.jdp.core.dao.base.IDao;
import ths.jdp.core.dao.base.Paging;
import ths.jdp.core.datasource.annotation.ChangeDatasource;
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#if("$!{subExportInfo.primaryKey}" != "")
import ths.jdp.util.PKUtil;
#break
#end
#end
#end

import ${exportInfo.modelPackage}.${exportInfo.modelClassName};
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
import ${exportInfo.subInfo.get("${key}").modelPackage}.${exportInfo.subInfo.get("${key}").modelClassName};
import ${exportInfo.subInfo.get("${key}").modelPackage}.${exportInfo.subInfo.get("${key}").modelClassName}s;
import ${exportInfo.subInfo.get("${key}").servicePackage}.${exportInfo.subInfo.get("${key}").serviceClassName};
#end
#end

/**
 * $!{exportInfo.tableName} Service类
 * @author eform4.0
 * @since ${CREATE_DATE}
 */
@Service
public class ${exportInfo.serviceClassName}{

#set($methodPrimaryKeyName = ${formTemplateService.underline2Camel("${exportInfo.primaryKey}", false)})##
#set($modelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${exportInfo.modelClassName}")})##
	/**
	 * 对应mapper.xml的namespace
	 */
	private final String sqlPackage = "${exportInfo.mapperPackage}.${exportInfo.mapperClassName}";
	
	@Autowired
	@Qualifier("jdpDao")
	protected IDao<${exportInfo.modelClassName}> dao;
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
	@Autowired
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
	private ${exportInfo.subInfo.get("${key}").serviceClassName} ${subServiceClassNameLowerCase};
#end
#end

	/**
	 * 查询列表数据-分页
	 * @param pageInfo 分页信息
	 * @param queryParam 查询条件
	 * @return
	 */
	@ChangeDatasource("${exportInfo.metaTable.tableDatasource}")
	public Paging<${exportInfo.modelClassName}> list(Paging<${exportInfo.modelClassName}> pageInfo, Map<String, Object> queryParam) {
		return dao.list(pageInfo, queryParam, sqlPackage + ".list");
	}

	/**
	 * 根据主键查询信息
	 * @param id 主键
	 * @return
	 */
	@ChangeDatasource("${exportInfo.metaTable.tableDatasource}")
	public ${exportInfo.modelClassName} selectById(String id) {
		return dao.get(id, sqlPackage + ".selectById");
	}

	/**
	 * 插入信息
	 * @param ${modelClassNameParam} ${exportInfo.metaTable.tableName}参数
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
	 * @param ${subModelClassNameParam}s ${subExportInfo.metaTable.tableName}参数
#end
#end
	 * @return
	 */
	@ChangeDatasource("${exportInfo.metaTable.tableDatasource}")
#if(${exportInfo.subInfo.size()} > 0)
	@Transactional
#end
	public int insert(${exportInfo.modelClassName} ${modelClassNameParam}#if(${exportInfo.subInfo.size()} > 0)##
#foreach($key in ${exportInfo.subInfo.keySet()})##
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))##
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})##
, ${subExportInfo.modelClassName}s ${subModelClassNameParam}s##
#end##
#end) {
#if(${exportInfo.subInfo.size()} > 0)
		int result = dao.insert(${modelClassNameParam}, sqlPackage + ".insert");
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
#set($subMethodPrimaryKeyName = ${formTemplateService.underline2Camel("${subExportInfo.primaryKey}", false)})
#set($subMethodForeignKeyName = ${formTemplateService.underline2Camel("${subExportInfo.foreignKey}", false)})
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
		//插入${subExportInfo.metaTable.tableName}信息
		if(${subModelClassNameParam}s.get${subExportInfo.modelClassName}s() != null && ${subModelClassNameParam}s.get${subExportInfo.modelClassName}s().size() > 0){
			for(${subExportInfo.modelClassName} ${subModelClassNameParam} : ${subModelClassNameParam}s.get${subExportInfo.modelClassName}s()){
				//设置${subExportInfo.metaTable.tableName}外键值
				${subModelClassNameParam}.set${subMethodForeignKeyName}(${modelClassNameParam}.get${methodPrimaryKeyName}());
			}
			${subServiceClassNameLowerCase}.batchInsert(${subModelClassNameParam}s.get${subExportInfo.modelClassName}s());
		}
#end
		return result;
#else
		return dao.insert(${modelClassNameParam}, sqlPackage + ".insert");
#end		
	}

	/**
	 * 更新信息
	 * @param ${modelClassNameParam} ${exportInfo.metaTable.tableName}参数
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
	 * @param ${subModelClassNameParam}s ${subExportInfo.metaTable.tableName}参数
#end
#end
	 * @return
	 */
	@ChangeDatasource("${exportInfo.metaTable.tableDatasource}")
#if(${exportInfo.subInfo.size()} > 0)
	@Transactional
#end
	public int update(${exportInfo.modelClassName} ${modelClassNameParam}#if(${exportInfo.subInfo.size()} > 0)##
#foreach($key in ${exportInfo.subInfo.keySet()})##
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))##
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})##
, ${subExportInfo.modelClassName}s ${subModelClassNameParam}s##
#end##
#end) {
#if(${exportInfo.subInfo.size()} > 0)
		int result = dao.update(${modelClassNameParam}, sqlPackage + ".update");
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
#set($subMethodPrimaryKeyName = ${formTemplateService.underline2Camel("${subExportInfo.primaryKey}", false)})
#set($subMethodForeignKeyName = ${formTemplateService.underline2Camel("${subExportInfo.foreignKey}", false)})
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
		//先删除后插入${subExportInfo.metaTable.tableName}信息
		${subServiceClassNameLowerCase}.deleteBy${subMethodForeignKeyName}(${modelClassNameParam}.get${methodPrimaryKeyName}());
		if(${subModelClassNameParam}s.get${subExportInfo.modelClassName}s() != null && ${subModelClassNameParam}s.get${subExportInfo.modelClassName}s().size() > 0){
			for(${subExportInfo.modelClassName} ${subModelClassNameParam} : ${subModelClassNameParam}s.get${subExportInfo.modelClassName}s()){
				//设置${subExportInfo.metaTable.tableName}外键值
				${subModelClassNameParam}.set${subMethodForeignKeyName}(${modelClassNameParam}.get${methodPrimaryKeyName}());
			}
			${subServiceClassNameLowerCase}.batchInsert(${subModelClassNameParam}s.get${subExportInfo.modelClassName}s());
		}
#end
		return result;
#else
		return dao.update(${modelClassNameParam}, sqlPackage + ".update");
#end		
	}
	
	/**
	 * 表单记录批量删除
	 * @param ids 主键，多个以逗号分隔
	 * @return
	 */
	@ChangeDatasource("${exportInfo.metaTable.tableDatasource}")
#if(${exportInfo.subInfo.size()} > 0)
	@Transactional
#end
	public int deleteByIds(String ids) {
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subMethodForeignKeyName = ${formTemplateService.underline2Camel("${subExportInfo.foreignKey}", false)})
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
		//删除${subExportInfo.metaTable.tableName}信息
		for(String id : ids.split(",")){
			${subServiceClassNameLowerCase}.deleteBy${subMethodForeignKeyName}(id);
		}
#end
#end
		return dao.delete(ids.split(","), sqlPackage + ".deleteByIds");
	}
}