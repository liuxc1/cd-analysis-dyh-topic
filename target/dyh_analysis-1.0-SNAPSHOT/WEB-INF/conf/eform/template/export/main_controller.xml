package ${exportInfo.controllerPackage};

#set($importArrays = 'false')
#foreach($formList in $exportInfo.queryFormList )##
#if("$!{formList.formcellTypecode}" == "OPENCHECKBOX" || "$!{formList.formcellTypecode}" == "CHECKBOXTREE" || "$!{formList.formcellTypecode}" == "CHECKBOXUSER" || "$!{formList.formcellTypecode}" == "CHECKBOXDEPT" || "$!{formList.formcellTypecode}" == "CHECKBOXROLE" || "$!{formList.formcellTypecode}" == "CHECKBOXPOSI" || "$!{formList.formcellTypecode}" == "CHECKBOXGROUP" )##
import java.util.Arrays;
#set($importArrays = 'true')
#break
#end
#end
#if("$!{importArrays}" == "false" && "$!{form.bpmProcKey}" != "")
import java.util.Arrays;
#end
#if("$!{form.bpmProcKey}" != "")
import java.util.LinkedHashMap;
#end
#if(${exportInfo.subInfo.size()} > 0 || ${exportInfo.formDictionaryList.size()} > 0 || ${exportInfo.formListDictionaryList.size()} > 0 || "$!{form.bpmProcKey}" != "")
import java.util.List;
#end
#if(${exportInfo.formDictionaryList.size()} > 0 || ${exportInfo.formListDictionaryList.size()} > 0)
import java.util.Map;
import java.util.HashMap;
#end

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

#if("$!{form.bpmProcKey}" != "")
import ths.jdp.api.model.ClientInstanceBean;
import ths.jdp.api.tool.BpmUtils;
import ths.jdp.bpm.webconsole.service.FlowService;
#end
import ths.jdp.core.consts.PubConstants;
import ths.jdp.core.dao.base.Paging;
import ths.jdp.core.model.FormModel;
#if("$!{form.bpmProcKey}" != "")
import ths.jdp.core.web.LoginCache;
#end
import ths.jdp.core.web.base.BaseController;
import ths.jdp.custom.util.Tool;
import ths.jdp.util.PKUtil;
#set($importDictionaryUtils = 'false')
#foreach($formCell in $exportInfo.formCellList)
#if("$!{formCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${formCell.formcellTypecode}")} == "true" )
import ths.jdp.eform.service.settings.dictionary.DictionaryUtils;
#set($importDictionaryUtils = 'true')
#break
#end
#end
#if("$!{importDictionaryUtils}" == "false" && (${exportInfo.formDictionaryList.size()} > 0 || ${exportInfo.formListDictionaryList.size()} > 0))
import ths.jdp.eform.service.settings.dictionary.DictionaryUtils;
#end

import ${exportInfo.modelPackage}.${exportInfo.modelClassName};
import ${exportInfo.servicePackage}.${exportInfo.serviceClassName};
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
import ${exportInfo.subInfo.get("${key}").modelPackage}.${exportInfo.subInfo.get("${key}").modelClassName};
import ${exportInfo.subInfo.get("${key}").modelPackage}.${exportInfo.subInfo.get("${key}").modelClassName}s;
import ${exportInfo.subInfo.get("${key}").servicePackage}.${exportInfo.subInfo.get("${key}").serviceClassName};
#end
#end
#set($hasFile = 'false')
#foreach($formCell in ${exportInfo.formCellList})
#if("$!{formCell.formcellTypecode}" == "FILE")
#set($hasFile = 'true')
#break
#end
#end

/**
 * $!{exportInfo.tableName} Controller类
 * @author eform4.0
 * @since ${CREATE_DATE}
 */
@Controller
public class ${exportInfo.controllerClassName} extends BaseController{

#set($modelClassNameLowerCase = ${formTemplateService.underline2Camel("${exportInfo.modelClassName}", true)})
#set($modelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${exportInfo.modelClassName}")})
#set($serviceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${exportInfo.serviceClassName}")})
#set($methodPrimaryKeyName = ${formTemplateService.underline2Camel("${exportInfo.primaryKey}", false)})
	@Autowired
	private ${exportInfo.serviceClassName} ${serviceClassNameLowerCase};
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
	@Autowired
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
	private ${exportInfo.subInfo.get("${key}").serviceClassName} ${subServiceClassNameLowerCase};
#end
#end
#if("$!{form.bpmProcKey}" != "")
	@Autowired
	private FlowService flowService;
#end
	
	/**
	 * 普通列表
	 * @param pageInfo 分页信息
	 * @param formModel 查询条件
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/list")
	public ModelAndView list(Paging<${exportInfo.modelClassName}> pageInfo, FormModel formModel){
		ModelAndView mav = new ModelAndView(${exportInfo.getViewPath("${exportInfo.listJsp}")});
		//设置默认排序，要求必需设置，因为sqlserver分页，无排序会报错
		if(pageInfo.getOrderBy() == null){
			pageInfo.setOrderBy(" ${exportInfo.primaryKey}");
		}
#foreach($formList in $exportInfo.queryFormList )##
#if("$!{formList.formcellTypecode}" == "OPENCHECKBOX" || "$!{formList.formcellTypecode}" == "CHECKBOXTREE" || "$!{formList.formcellTypecode}" == "CHECKBOXUSER" || "$!{formList.formcellTypecode}" == "CHECKBOXDEPT" || "$!{formList.formcellTypecode}" == "CHECKBOXROLE" || "$!{formList.formcellTypecode}" == "CHECKBOXPOSI" || "$!{formList.formcellTypecode}" == "CHECKBOXGROUP" )##
		//${formList.fieldName}查询条件字符串转集合
		if(!Tool.isNull(String.valueOf(formModel.get("${formList.fieldCode}")))){
			formModel.set("${formList.fieldCode}_LIST", Arrays.asList(formModel.get("${formList.fieldCode}").toString().split(",")));
		}
#end
#end
		pageInfo = ${serviceClassNameLowerCase}.list(pageInfo, formModel.getForm());
		mav.addObject("pageInfo", pageInfo);
		mav.addObject("form", formModel.getForm());
#if(${exportInfo.formListDictionaryList.size()} > 0)
		//字典
		Map<String, List<Map<String, String>>> dictionaryMap = new HashMap<String, List<Map<String, String>>>();
#foreach($dictionaryTreeCode in $exportInfo.formListDictionaryList)
		dictionaryMap.put("${dictionaryTreeCode}", DictionaryUtils.getDictionaryByTreeCode("${dictionaryTreeCode}", formModel.getForm()));
#end
		mav.addObject("dictionaryMap", dictionaryMap);
#end
		return mav;
	}

	/**
	 * 编辑页
	 * @param id 主键
#if("$!{form.bpmProcKey}" != "")
	 * @param taskId 任务id，工作流使用
	 * @param processDefKey 流程定义key，工作流使用
#end
	 * @param formModel 动态参数，用于默认值，字典
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/edit")
	public ModelAndView edit(String id#if("$!{form.bpmProcKey}" != ""), String taskId, String processDefKey#end, FormModel formModel){
		ModelAndView mav = new ModelAndView(${exportInfo.getViewPath("${exportInfo.editJsp}")});
		if(!Tool.isNull(id)){
			${exportInfo.modelClassName} entity = ${serviceClassNameLowerCase}.selectById(id);
#foreach($formCell in $exportInfo.formCellList)
#if("$!{formCell.pFormcellId}" == "" && "$!{formCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${formCell.formcellTypecode}")} == "true" )
#set($modelMethodFieldCode = ${formTemplateService.underline2Camel("${formCell.fieldCode}", false)})##
			//设置${formCell.fieldName}显示名称属性值
			entity.set${modelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{formCell.formcellTypecode}", "entity", "${modelMethodFieldCode}", "$!{formCell.formcellDictionary}")});
#end
#end
			mav.addObject("entity", entity);
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
#set($subMethodForeignKeyName = ${formTemplateService.underline2Camel("${subExportInfo.foreignKey}", false)})
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
			//获取${subExportInfo.metaTable.tableName}信息
			List<${subExportInfo.modelClassName}> ${subModelClassNameParam}List = ${subServiceClassNameLowerCase}.selectBy${subMethodForeignKeyName}(id);
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
			if(${subModelClassNameParam}List != null && ${subModelClassNameParam}List.size() > 0){
				for(${subExportInfo.modelClassName} ${subModelClassNameParam} : ${subModelClassNameParam}List){
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
#set($subModelMethodFieldCode = ${formTemplateService.underline2Camel("${tableFormCell.fieldCode}", false)})##
					//设置${tableFormCell.fieldName}显示名称属性值
					${subModelClassNameParam}.set${subModelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{tableFormCell.formcellTypecode}", "${subModelClassNameParam}", "${subModelMethodFieldCode}", "$!{tableFormCell.formcellDictionary}")});
#end
#end
				}
			}
#break
#end
#end
			mav.addObject("${subModelClassNameParam}List", ${subModelClassNameParam}List);
#end
#end
		}
#if("$!{form.bpmProcKey}" != "")
		mav.addObject("taskId", taskId);
		mav.addObject("processDefKey", processDefKey);
#end
		mav.addObject("form", formModel.getForm());
#if(${exportInfo.formDictionaryList.size()} > 0)
		//字典
		Map<String, List<Map<String, String>>> dictionaryMap = new HashMap<String, List<Map<String, String>>>();
#foreach($dictionaryTreeCode in $exportInfo.formDictionaryList)
		dictionaryMap.put("${dictionaryTreeCode}", DictionaryUtils.getDictionaryByTreeCode("${dictionaryTreeCode}", formModel.getForm()));
#end
		mav.addObject("dictionaryMap", dictionaryMap);
#end
		return mav;
	}
	
	/**
	 * 保存
	 * @param ${modelClassNameParam} ${exportInfo.metaTable.tableName}参数
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
	 * @param ${subModelClassNameParam}s ${subExportInfo.metaTable.tableName}参数
#end
#end
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/save")
	@ResponseBody
	public String save(${exportInfo.modelClassName} ${modelClassNameParam}#if(${exportInfo.subInfo.size()} > 0)##
#foreach($key in ${exportInfo.subInfo.keySet()})##
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))##
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})##
, ${subExportInfo.modelClassName}s ${subModelClassNameParam}s##
#end##
#end){
		if(Tool.isNull(${modelClassNameParam}.get${methodPrimaryKeyName}())){//插入
			${modelClassNameParam}.set${methodPrimaryKeyName}(PKUtil.uuid());
			${serviceClassNameLowerCase}.insert(${modelClassNameParam}#if(${exportInfo.subInfo.size()} > 0)##
#foreach($key in ${exportInfo.subInfo.keySet()})##
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))##
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})##
, ${subModelClassNameParam}s##
#end##
#end);
		}else{//更新
			${serviceClassNameLowerCase}.update(${modelClassNameParam}#if(${exportInfo.subInfo.size()} > 0)##
#foreach($key in ${exportInfo.subInfo.keySet()})##
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))##
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})##
, ${subModelClassNameParam}s##
#end##
#end);
		}
#if(${hasFile} == "true")
		return PubConstants.SUCCESS + "|" + ${modelClassNameParam}.get${methodPrimaryKeyName}();
#else
		return PubConstants.SUCCESS;
#end
	}
	
	/**
	 * 详细页
	 * @param id 主键
	 * @param formModel 动态参数，用于默认值，字典
#if("$!{form.bpmProcKey}" != "")
	 * @param taskId 任务id，工作流使用
#end
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/detail")
	public ModelAndView detail(@RequestParam String id, FormModel formModel#if("$!{form.bpmProcKey}" != ""), String taskId#end){
		ModelAndView mav = new ModelAndView(${exportInfo.getViewPath("${exportInfo.detailJsp}")});
		${exportInfo.modelClassName} entity = ${serviceClassNameLowerCase}.selectById(id);
#foreach($formCell in $exportInfo.formCellList)
#if("$!{formCell.pFormcellId}" == "" && "$!{formCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${formCell.formcellTypecode}")} == "true" )
#set($modelMethodFieldCode = ${formTemplateService.underline2Camel("${formCell.fieldCode}", false)})##
		//设置${formCell.fieldName}显示名称属性值
		entity.set${modelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{formCell.formcellTypecode}", "entity", "${modelMethodFieldCode}", "$!{formCell.formcellDictionary}")});
#end
#end
		mav.addObject("entity", entity);
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
#set($subMethodForeignKeyName = ${formTemplateService.underline2Camel("${subExportInfo.foreignKey}", false)})
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
		//获取${subExportInfo.metaTable.tableName}信息
		List<${subExportInfo.modelClassName}> ${subModelClassNameParam}List = ${subServiceClassNameLowerCase}.selectBy${subMethodForeignKeyName}(id);
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
		if(${subModelClassNameParam}List != null && ${subModelClassNameParam}List.size() > 0){
			for(${subExportInfo.modelClassName} ${subModelClassNameParam} : ${subModelClassNameParam}List){
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
#set($subModelMethodFieldCode = ${formTemplateService.underline2Camel("${tableFormCell.fieldCode}", false)})##
				//设置${tableFormCell.fieldName}显示名称属性值
				${subModelClassNameParam}.set${subModelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{tableFormCell.formcellTypecode}", "${subModelClassNameParam}", "${subModelMethodFieldCode}", "$!{tableFormCell.formcellDictionary}")});
#end
#end
			}
		}
#break
#end
#end
		mav.addObject("${subModelClassNameParam}List", ${subModelClassNameParam}List);
#end
#end
#if(${exportInfo.formDictionaryList.size()} > 0)
		//字典
		Map<String, List<Map<String, String>>> dictionaryMap = new HashMap<String, List<Map<String, String>>>();
#foreach($dictionaryTreeCode in $exportInfo.formDictionaryList)
		dictionaryMap.put("${dictionaryTreeCode}", DictionaryUtils.getDictionaryByTreeCode("${dictionaryTreeCode}", formModel.getForm()));
#end
		mav.addObject("dictionaryMap", dictionaryMap);
#end
#if("$!{form.bpmProcKey}" != "")
		mav.addObject("taskId", taskId);
#end
		return mav;
	}
	
	/**
	 * 表单记录批量删除
	 * @param ids 主键，多个以逗号分隔
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/delete")
	@ResponseBody
	public String delete(@RequestParam String ids){
		if(!Tool.isNull(ids)){
			${serviceClassNameLowerCase}.deleteByIds(ids);
		}
		return PubConstants.SUCCESS;
	}
	
#if("$!{form.bpmProcKey}" != "")
	/**
	 * 工作流列表
	 * @param pageInfo 分页信息
	 * @param formModel 查询条件
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/bpmlist")
	public ModelAndView bpmList(Paging<${exportInfo.modelClassName}> pageInfo, FormModel formModel){
		ModelAndView mav = new ModelAndView(${exportInfo.getViewPath("${exportInfo.bpmListJsp}")});
		//工作流定义key
		String processDefKey = "${form.bpmProcKey}";
		// 1、查询待办任务
		List<String> processDefinitionKeys = Arrays.asList(processDefKey.split(",")); //流程定义KEY集合，获取所有流程的待办任务传递null
		String startStartTime = null; //提交时间范围-开始时间 可为空
		String endStartTime = null; //提交时间范围-结束时间 可为空
		String title = null; //业务标题 可为空
		List<LinkedHashMap<String, Object>> tasks = null;
		//判断是否为已办列表
		if("DONE".equals(String.valueOf(formModel.get("HANDLE_STATE")))){
			// 办结状态，0正在办理，1已经办结，3所有
			int finishStatus = 3;
			tasks = flowService.getDoneTask(LoginCache.getLoginUser().getLoginName(), 
					processDefinitionKeys, finishStatus, startStartTime, endStartTime, title);
		}else{
			tasks = flowService.getToDoTask(LoginCache.getLoginUser().getLoginName(), 
					processDefinitionKeys, startStartTime, endStartTime, title);
		}
		// 2、客户端实例Bean 存有实例ID的in sql语句、instanceCount、instanceTaskMap
		ClientInstanceBean clientInstanceBean = BpmUtils.assemblySqlByTaskList("INSTANCE_ID", tasks, 1, 10000);
		// 3、判断是否有实例id
		if (clientInstanceBean.getInstanceCount() == 0) {
			mav.addObject("pageInfo", pageInfo);
			return mav;
		}
		// 4、查询业务数据
		//设置默认排序，要求必需设置，因为sqlserver分页，无排序会报错
		if(pageInfo.getOrderBy() == null){
			pageInfo.setOrderBy(" ${exportInfo.primaryKey}");
		}
		formModel.set("INSTANCE_SQL", clientInstanceBean.getInstancesSql());
		pageInfo = ${serviceClassNameLowerCase}.list(pageInfo, formModel.getForm());
		// 5、业务数据绑定Task信息
		for(${exportInfo.modelClassName} entity : pageInfo.getList()) {
			if(entity.getInstanceId() != null && clientInstanceBean.getInstanceTaskMap().containsKey(entity.getInstanceId())){
				//如果一条业务数据需要绑定多条Task信息，可修改此处，例子中只取了最近一条任务信息
				LinkedHashMap<String, Object> task = clientInstanceBean.getInstanceTaskMap().get(entity.getInstanceId()).get(0);
				entity.setTaskId(task.get("id").toString());
			}
		}
		mav.addObject("pageInfo", pageInfo);
		mav.addObject("form", formModel.getForm());
		mav.addObject("processDefKey", processDefKey);
		return mav;
	}
	
	/**
	 * 工作流编辑页
	 * @param id 主键
	 * @param taskId 任务id，工作流使用
	 * @param processDefKey 流程定义key，工作流使用
	 * @param formModel 动态参数，用于默认值，字典
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/bpmedit")
	public ModelAndView bpmEdit(String id, String taskId, String processDefKey, FormModel formModel){
		ModelAndView mav = new ModelAndView(${exportInfo.getViewPath("${exportInfo.bpmEditJsp}")});
		if(!Tool.isNull(id)){
			${exportInfo.modelClassName} entity = ${serviceClassNameLowerCase}.selectById(id);
#foreach($formCell in $exportInfo.formCellList)
#if("$!{formCell.pFormcellId}" == "" && "$!{formCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${formCell.formcellTypecode}")} == "true" )
#set($modelMethodFieldCode = ${formTemplateService.underline2Camel("${formCell.fieldCode}", false)})##
			//设置${formCell.fieldName}显示名称属性值
			entity.set${modelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{formCell.formcellTypecode}", "entity", "${modelMethodFieldCode}", "$!{formCell.formcellDictionary}")});
#end
#end
			mav.addObject("entity", entity);
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
#set($subMethodForeignKeyName = ${formTemplateService.underline2Camel("${subExportInfo.foreignKey}", false)})
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
			//获取${subExportInfo.metaTable.tableName}信息
			List<${subExportInfo.modelClassName}> ${subModelClassNameParam}List = ${subServiceClassNameLowerCase}.selectBy${subMethodForeignKeyName}(id);
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
			if(${subModelClassNameParam}List != null && ${subModelClassNameParam}List.size() > 0){
				for(${subExportInfo.modelClassName} ${subModelClassNameParam} : ${subModelClassNameParam}List){
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
#set($subModelMethodFieldCode = ${formTemplateService.underline2Camel("${tableFormCell.fieldCode}", false)})##
					//设置${tableFormCell.fieldName}显示名称属性值
					${subModelClassNameParam}.set${subModelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{tableFormCell.formcellTypecode}", "${subModelClassNameParam}", "${subModelMethodFieldCode}", "$!{tableFormCell.formcellDictionary}")});
#end
#end
				}
			}
#break
#end
#end
			mav.addObject("${subModelClassNameParam}List", ${subModelClassNameParam}List);
#end
#end
		}
		mav.addObject("taskId", taskId);
		mav.addObject("processDefKey", processDefKey);
		mav.addObject("form", formModel.getForm());
#if(${exportInfo.formDictionaryList.size()} > 0)
		//字典
		Map<String, List<Map<String, String>>> dictionaryMap = new HashMap<String, List<Map<String, String>>>();
#foreach($dictionaryTreeCode in $exportInfo.formDictionaryList)
		dictionaryMap.put("${dictionaryTreeCode}", DictionaryUtils.getDictionaryByTreeCode("${dictionaryTreeCode}", formModel.getForm()));
#end
		mav.addObject("dictionaryMap", dictionaryMap);
#end
		return mav;
	}
	
	/**
	 * 详细页
	 * @param id 主键
	 * @param formModel 动态参数，用于默认值，字典
	 * @param taskId 任务id，工作流使用
	 * @return
	 */
	@RequestMapping("/${exportInfo.jspDirectory}/bpmdetail")
	public ModelAndView bpmDetail(@RequestParam String id, FormModel formModel, String taskId){
		ModelAndView mav = new ModelAndView(${exportInfo.getViewPath("${exportInfo.bpmDetailJsp}")});
		${exportInfo.modelClassName} entity = ${serviceClassNameLowerCase}.selectById(id);
#foreach($formCell in $exportInfo.formCellList)
#if("$!{formCell.pFormcellId}" == "" && "$!{formCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${formCell.formcellTypecode}")} == "true" )
#set($modelMethodFieldCode = ${formTemplateService.underline2Camel("${formCell.fieldCode}", false)})##
		//设置${formCell.fieldName}显示名称属性值
		entity.set${modelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{formCell.formcellTypecode}", "entity", "${modelMethodFieldCode}", "$!{formCell.formcellDictionary}")});
#end
#end
		mav.addObject("entity", entity);
#if(${exportInfo.subInfo.size()} > 0)
#foreach($key in ${exportInfo.subInfo.keySet()})
#set($subExportInfo = $exportInfo.subInfo.get("${key}"))
#set($subServiceClassNameLowerCase = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.serviceClassName}")})
#set($subMethodForeignKeyName = ${formTemplateService.underline2Camel("${subExportInfo.foreignKey}", false)})
#set($subModelClassNameParam = ${formTemplateService.lowerCaseFirstChar("${subExportInfo.modelClassName}")})
		//获取${subExportInfo.metaTable.tableName}信息
		List<${subExportInfo.modelClassName}> ${subModelClassNameParam}List = ${subServiceClassNameLowerCase}.selectBy${subMethodForeignKeyName}(id);
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
		if(${subModelClassNameParam}List != null && ${subModelClassNameParam}List.size() > 0){
			for(${subExportInfo.modelClassName} ${subModelClassNameParam} : ${subModelClassNameParam}List){
#foreach($tableFormCell in $subExportInfo.formCellList)
#if("$!{tableFormCell.shownameMetaField}" == "" && $!{formTemplateService.isCodeNameFormCell("${tableFormCell.formcellTypecode}")} == "true")
#set($subModelMethodFieldCode = ${formTemplateService.underline2Camel("${tableFormCell.fieldCode}", false)})##
				//设置${tableFormCell.fieldName}显示名称属性值
				${subModelClassNameParam}.set${subModelMethodFieldCode}Name(DictionaryUtils.${formTemplateService.getDictionaryFunction("$!{tableFormCell.formcellTypecode}", "${subModelClassNameParam}", "${subModelMethodFieldCode}", "$!{tableFormCell.formcellDictionary}")});
#end
#end
			}
		}
#break
#end
#end
		mav.addObject("${subModelClassNameParam}List", ${subModelClassNameParam}List);
#end
#end
#if(${exportInfo.formDictionaryList.size()} > 0)
		//字典
		Map<String, List<Map<String, String>>> dictionaryMap = new HashMap<String, List<Map<String, String>>>();
#foreach($dictionaryTreeCode in $exportInfo.formDictionaryList)
		dictionaryMap.put("${dictionaryTreeCode}", DictionaryUtils.getDictionaryByTreeCode("${dictionaryTreeCode}", formModel.getForm()));
#end
		mav.addObject("dictionaryMap", dictionaryMap);
#end
		mav.addObject("taskId", taskId);
		return mav;
	}
#end
}