<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:bean="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- 异步线程池，用于异步发送消息，单例 -->
	<bean id="threadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数-->
		<property name="corePoolSize" value="10" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="100" />
		<!-- 队列最大长度>= mainExecutor.maxSize -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间（单位秒） -->
		<property name="keepAliveSeconds" value="60" />
		<!-- 线程池对拒绝任务(无线程可用)的处理 策略 -->
		<!-- 若不作该处理，当线程满了，队列满了之后，继续往下增加任务，则抛出异常，拒绝该任务 --> 
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<property name="threadFactory">
			<bean class="ths.project.common.factory.CustomThreadFactory">
				<constructor-arg index="0" value="customThreadFactory_0"/>
				<constructor-arg index="1" value="false"/>
			</bean>
		</property>
	</bean>

	<!-- 异步线程池，用于异步发送消息，单例 -->
	<bean id="messageThreadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数-->
		<property name="corePoolSize" value="5" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="20" />
		<!-- 队列最大长度>= mainExecutor.maxSize -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间（单位秒） -->
		<property name="keepAliveSeconds" value="60" />
		<!-- 线程池对拒绝任务(无线程可用)的处理 策略 -->
		<!-- 若不作该处理，当线程满了，队列满了之后，继续往下增加任务，则抛出异常，拒绝该任务 -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<property name="threadFactory">
			<bean class="ths.project.common.factory.CustomThreadFactory">
				<constructor-arg index="0" value="customThreadFactory_0"/>
				<constructor-arg index="1" value="false"/>
			</bean>
		</property>
	</bean>

	<!-- 异步线程池，用于异步发送消息，单例 -->
	<bean id="reportThreadPoolTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数-->
		<property name="corePoolSize" value="5" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="20" />
		<!-- 队列最大长度>= mainExecutor.maxSize -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间（单位秒） -->
		<property name="keepAliveSeconds" value="60" />
		<!-- 线程池对拒绝任务(无线程可用)的处理 策略 -->
		<!-- 若不作该处理，当线程满了，队列满了之后，继续往下增加任务，则抛出异常，拒绝该任务 -->
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
		<property name="threadFactory">
			<bean class="ths.project.common.factory.CustomThreadFactory">
				<constructor-arg index="0" value="customThreadFactory_0"/>
				<constructor-arg index="1" value="false"/>
			</bean>
		</property>
	</bean>
</beans>