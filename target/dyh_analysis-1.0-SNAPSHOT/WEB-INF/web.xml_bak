<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         version="3.0">
    <display-name>THS Web Project</display-name>

    <welcome-file-list>
        <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>

    <!-- Spring和mybatis的配置文件 -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:conf/spring.xml</param-value>
    </context-param>

    <!-- 自定义项目全局配置的初始化监听器 -->
    <listener>
        <listener-class>ths.project.common.servlet.listener.CustomWebConfigureListener</listener-class>
    </listener>
    <!-- Spring监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <!-- Spring request监听器，帮助我们很方便的在程序中拿到request -->
    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>
    <listener>
        <listener-class>ths.jdp.custom.util.res.CustomServer</listener-class>
    </listener>
    <!-- 防止Spring内存溢出监听器，确保Web应用程序的类加载器以及其加载的类正确的释放资源 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!-- 编码过滤器 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!-- <async-supported>true</async-supported> -->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>

    <!-- ========================单点登录开始 ======================== -->
    <!--用于单点退出，该过滤器用于实现单点登出功能 -->
    <listener>
        <listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
    </listener>
    <!--该过滤器用于实现单点登出功能。 -->
    <filter>
        <filter-name>CASSingle Sign OutFilter</filter-name>
        <filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CASSingle Sign OutFilter</filter-name>
        <!-- url-pattern 不需要修改 -->
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>

    <!--该过滤器负责对Ticket的校验工作，必须启用它 -->
    <filter>
        <filter-name>CASValidationFilter</filter-name>
        <filter-class>org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter
        </filter-class>
        <init-param>
            <param-name>casServerUrlPrefix</param-name>
            <!-- SSO SERVER的IP+端口+上下文 -->
            <param-value>https://thspollutioncontrol.bigdatacd.com:8081/cas</param-value>
        </init-param>
        <init-param>
            <param-name>serverName</param-name>
            <!--客户端的IP+端口 -->
            <param-value>/</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CASValidationFilter</filter-name>
        <!-- url-pattern 不需要修改 -->
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>CASFilter</filter-name>
        <filter-class>ths.jdp.cas.client.filter.CustomAuthenticationFilter</filter-class>
        <init-param>
            <param-name>casServerLoginUrl</param-name>
            <!-- SSO SERVER的IP+端口+上下文+登录地址 -->
            <param-value>https://thspollutioncontrol.bigdatacd.com:8081/cas/login</param-value>
        </init-param>
        <init-param>
            <param-name>serverName</param-name>
            <!--客户端的IP+端口-->
            <param-value>/</param-value>
        </init-param>
        <init-param>
            <param-name>regExcludeUrl</param-name>
            <!-- 不过滤的路径，值为正则 -->
            <param-value>
                <![CDATA[/profee/|/console/|/app/|/api/]]></param-value>
        </init-param>
        <init-param>
            <param-name>encodeServiceUrl</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>CASFilter</filter-name>
        <!-- url-pattern 不需要修改 -->
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>


    <!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->
    <filter>
        <filter-name>CASHttpServletRequest WrapperFilter</filter-name>
        <filter-class>
            org.jasig.cas.client.util.HttpServletRequestWrapperFilter
        </filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CASHttpServletRequest WrapperFilter</filter-name>
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>

    <!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->
    <filter>
        <filter-name>CASAssertion Thread LocalFilter</filter-name>
        <filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>CASAssertion Thread LocalFilter</filter-name>
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>

    <!-- SSO 登录后，业务系统获取登录用户信息  SSO-Client Filter-->
    <filter>
        <filter-name>SSOClientFilter</filter-name>
        <filter-class>ths.jdp.project.filter.SSOClientFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>SSOClientFilter</filter-name>
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>
    <!-- ========================单点登录结束 ======================== -->

    <!-- XSS&SQL过滤 -->
    <filter>
        <filter-name>xssFilter</filter-name>
        <filter-class>ths.jdp.project.filter.XSSFilter</filter-class>
        <init-param>
            <param-name>regExpress</param-name>
            <param-value><![CDATA[((?<![0-9a-zA-Z\_]+)script(?![0-9a-zA-Z\_]+))|([<>'"])|%27|%22]]></param-value>
            <!--
                关键字正则： (?<![0-9a-zA-Z\_]+)script(?![0-9a-zA-Z\_]+)，为什么正则写成这种形式？因为script虽然是关键字，但scriptA、_script、Bscript为非关键字，前后只要存在[0-9a-zA-Z\_]就不应该成为危险字符，因为数据库字段名称经常包含关键字，例：UPDATE_TIME。
                <param-value><![CDATA[([<>'"])|%27|%22|(?<![0-9a-zA-Z\_]+)script(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)select(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)insert(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)delete(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)from(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)drop(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)update(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)truncate(?![0-9a-zA-Z\_]+)|(?<![0-9a-zA-Z\_]+)xp_cmdshell(?![0-9a-zA-Z\_]+)|exec\s+master|(?<![0-9a-zA-Z\_]+)netlocalgroup(?![0-9a-zA-Z\_]+)|net\s+user]]></param-value>
             -->
        </init-param>
        <init-param>
            <param-name>regExcludeUrl</param-name>
            <!-- 不过滤的路径，值为正则 -->
            <param-value>
                <![CDATA[/profee/|formdesign_main_desgin_save_formprop.vm$|customSave.vm$|formdesign_main_save.vm$|article_save.vm$|/console/]]></param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>xssFilter</filter-name>
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>

    <!--<filter>
        <filter-name>SentinelCommonFilter</filter-name>
        <filter-class>com.alibaba.csp.sentinel.adapter.servlet.CommonFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>SentinelCommonFilter</filter-name>
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>-->

    <!-- zipkin链路追踪过滤器 -->
    <!--<filter>
        <filter-name>tracingFilter</filter-name>
        <filter-class>brave.spring.webmvc.DelegatingTracingFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>tracingFilter</filter-name>
        <url-pattern>*.vm</url-pattern>
    </filter-mapping>-->

    <!-- Spring MVC servlet -->
    <servlet>
        <servlet-name>SpringMVC</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:conf/spring-mvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup> <!-- 容器启动，直接加载 -->
        <async-supported>true</async-supported>  <!-- 支持异步处理 -->
    </servlet>
    <servlet-mapping>
        <servlet-name>SpringMVC</servlet-name>
        <url-pattern>*.vm</url-pattern>
        <url-pattern>/websocket/*</url-pattern><!-- websocket的后缀 -->
    </servlet-mapping>
</web-app>
