package ths.project.api.env_emergency.service;import org.apache.commons.collections.MapUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.stereotype.Service;import ths.jdp.core.service.base.BaseService;import ths.project.api.env_emergency.mapper.AppEnvEmergencyMapper;import ths.project.api.env_emergency.vo.EmergencyShelterVo;import ths.project.api.env_emergency.vo.EmergencySupplieVo;import ths.project.api.env_emergency.vo.RiskSourceStatisticalVo;import ths.project.dingding.DdConfigSign;import ths.project.dingding.DingDingMain;import java.util.*;/** * @author:Toledo * @date:2021/11/22 14:55 * @descripthion: **/@Servicepublic class AppEnvEmerageService extends BaseService {    private final AppEnvEmergencyMapper appEnvEmergencyMapper;    static String agentId = "1378695739";    static String corpId = "ding9504e0e12ed892d424f2f5cc6abecb85";    public AppEnvEmerageService(AppEnvEmergencyMapper appEnvEmergencyMapper) {        this.appEnvEmergencyMapper = appEnvEmergencyMapper;    }    public RiskSourceStatisticalVo riskSourceStatistical() {        RiskSourceStatisticalVo riskSourceStatisticalVo = appEnvEmergencyMapper.riskSourceStatistical();        return riskSourceStatisticalVo;    }    public Map<String, Object> airStatistical() {        Map<String, Object> map = appEnvEmergencyMapper.airStatistical();        return map;    }    public Map<String, Object> waterStatistical() {        Map<String, Object> map = appEnvEmergencyMapper.waterStatistical();        return map;    }    public List<EmergencySupplieVo> emergencySupplie(Map<String, Object> param) {        List<EmergencySupplieVo> list = appEnvEmergencyMapper.emergencySupplie(param);        return list;    }    public Map<String, Object> suppliesInfo(Map<String, Object> param) {        Map<String, Object> map = appEnvEmergencyMapper.suppliesInfo(param);        return map;    }    public Map<String, Object> managementPersonInfo() {        Map<String, Object> map = appEnvEmergencyMapper.managementPersonInfo();        return map;    }    public Map<String, Object> panelInfo() {        Map<String, Object> map = appEnvEmergencyMapper.panelInfo();        return map;    }    public Map<String, Object> relevantUnitsInfo() {        Map<String, Object> map = appEnvEmergencyMapper.relevantUnitsInfo();        return map;    }    public Map<String, Object> rescueTeamsInfo() {        Map<String, Object> map = appEnvEmergencyMapper.rescueTeamsInfo();        return map;    }    public Map<String, Object> environmentalMonitorStationInfo() {        Map<String, Object> map = appEnvEmergencyMapper.environmentalMonitorStationInfo();        return map;    }    public Map<String, Object> dutypersonInfo() {        Map<String, Object> map = appEnvEmergencyMapper.dutypersonInfo();        return map;    }    public EmergencyShelterVo emergencyShelterInfo() {        EmergencyShelterVo emergencyShelterVo = appEnvEmergencyMapper.emergencyShelterInfo();        return emergencyShelterVo;    }    public List<Map<String, Object>> managementpersonnelInfo(Map<String, Object> param) {        List<Map<String, Object>> list = appEnvEmergencyMapper.managementpersonnelInfo(param);        return list;    }    public List<Map<String, Object>> panel(Map<String, Object> param) {        List<Map<String, Object>> list = appEnvEmergencyMapper.panel(param);        return list;    }    public List<Map<String, Object>> relevantUnits(Map<String, Object> param) {        List<Map<String, Object>> list = appEnvEmergencyMapper.relevantUnits(param);        return list;    }    public List<Map<String, Object>> rescueTeams(Map<String, Object> param) {        List<Map<String, Object>> list = appEnvEmergencyMapper.rescueTeams(param);        return list;    }    public List<Map<String, Object>> environmentalMonitoreStationInfo(Map<String, Object> param) {        List<Map<String, Object>> list = appEnvEmergencyMapper.environmentalMonitoreStationInfo(param);        return list;    }    public List<Map<String, Object>> personnelOnDutyInfo(Map<String, Object> param) {        List<Map<String, Object>> list = appEnvEmergencyMapper.personnelOnDutyInfo(param);        return list;    }    public List<Map<String, Object>> getSuppliesApp(Map<String, Object> param) {        List<Map<String, Object>> list = appEnvEmergencyMapper.getSuppliesApp(param);        return list;    }    public void updatess() throws InterruptedException {        List<Map<String, Object>> list = appEnvEmergencyMapper.getList();        Random random = new Random();        for (int i = 0; i < list.size(); i++) {            String f_mechinoutrecordid = MapUtils.getString(list.get(i), "F_MECHINOUTRECORDID");            Map<String, Object> param = new HashMap<>();            param.put("F_MECHINOUTRECORDID", f_mechinoutrecordid);            int i1 = random.nextInt(10);            Thread.sleep(random.nextInt(50));            String substring = UUID.randomUUID().toString().substring(0, 8);            String as = "";            switch (i1) {                case 1:                    as = "A";                    break;                case 2:                    as = "A";                    break;                case 3:                    as = "B";                    break;                case 4:                    as = "B";                    break;                case 5:                    as = "C";                    break;                case 6:                    as = "C";                    break;                case 7:                    as = "D";                    break;                case 8:                    as = "D";                    break;                case 9:                    as = "E";                    break;                default:                    as = "F";                    break;            }            param.put("carNum", "Â∑ù" + as + substring);            appEnvEmergencyMapper.insert(param);        }    }    public Map<String, Object> authentication(String url, String nonceStr) {        Map<String, Object> map = new HashMap<>();        DingDingMain dingDingMain = new DingDingMain();        String jsticket = dingDingMain.getJsapiTicket();        nonceStr = StringUtils.isNotBlank(nonceStr) ? nonceStr : "dingding";        long timeStamp = System.currentTimeMillis();        url = StringUtils.isNotBlank(url) ? url : "-";        try {            String sign = DdConfigSign.sign(jsticket, nonceStr, timeStamp, url);            map.put("agentId", agentId);            map.put("corpId", corpId);            map.put("timeStamp", timeStamp);            map.put("nonceStr", nonceStr);            map.put("signature", sign);            map.put("jsticket", jsticket);        } catch (Exception e) {            e.printStackTrace();        }        return map;    }}