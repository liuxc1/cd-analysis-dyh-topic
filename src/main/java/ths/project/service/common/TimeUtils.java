package ths.project.service.common;//import com.alibaba.nacos.common.utils.UuidUtils;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import ths.jdp.util.DateUtils;import ths.project.common.util.UUIDUtil;import ths.project.service.common.vo.DataResult;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Calendar;import java.util.Date;import java.util.regex.Pattern;/** * @author:Toledo * @date:2021/3/10 12:15 * @descripthion: **/@Slf4jpublic class TimeUtils extends DateUtils {    /**     * 英文全格式     */    public static String DATE_YEAR_FULL = "yyyy-MM-dd HH:mm:ss";    public static String DATE_YEAR_DAY = "yyyy-MM-dd";    public static String DATE_YEAR_MONTH = "yyyy-MM";    public static String DATE_MONTH = "MM";    //start  请在这里扩展英文全格式    //end    /**     * 中文全格式     */    public static String DATE_YEAR_FULL_CN = "y年M月d日 H时m分s秒";    public static String DATE_YEAR_DAY_CN = "y年M月d日";    public static String DATE_YEAR_MONTH_CN = "y年M月";    public static String DATE_MONTH_CN = "M月";    //start  请在这里扩展中文全格式    //end    /**     * 匹配日期正则,最短匹配 yyyy-MM-dd 最长 yyyy-MM-dd HH:mm:ss(动态长度)     */    public static String PATTERN_YEAR_FULL_AUTO = "^\\d{4}-\\d{1,2}-\\d{1,2}\\s?\\d{0,2}:?\\d{0,2}:?\\d{0,2}";    /**     * 固定长度匹配     */    //yyyy-MM-dd HH:mm:ss    public static String PATTERN_YEAR_FULL = "^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{1,2}:\\d{1,2}";    //yyyy-MM-dd HH:mm    public static String PATTERN_YEAR_MIN = "^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}:\\d{1,2}";    //yyyy-MM-dd HH    public static String PATTERN_YEAR_HOUR = "^\\d{4}-\\d{1,2}-\\d{1,2}\\s\\d{1,2}}";    //yyyy-MM-dd    public static String PATTERN_YEAR_DAY = "^\\d{4}-\\d{1,2}-\\d{1,2}";    //yyyy-MM    public static String PATTERN_YEAR_MONTH = "^\\d{4}-\\d{1,2}";    //start  正则扩展    //end    /**     * 获取 Calendar 实例     *     * @return     */    public static Calendar getCalendar() {        return Calendar.getInstance();    }    /**     * 获取 Calendar 实例     *     * @param date     * @return     */    public static Calendar getCalendar(Date date) {        if (date == null) {            log.error("date 不能为空");            return null;        }        Calendar instance = Calendar.getInstance();        getCalendar().setTime(date);        return instance;    }    /**     * 获取N小时之前的结束时间     *     * @param hours 前几小时(默认当前开始)     * @return format     */    public static String getHourRoll(Integer hours) {        return getHourRoll(hours, DATE_YEAR_FULL, new Date());    }    /**     * @param hours     * @param date  yyyy-MM-dd HH:mm:ss     * @return     */    public static String getHourRoll(Integer hours, String date) {        try {            SimpleDateFormat simpleDateFormat = new SimpleDateFormat(DATE_YEAR_FULL);            Date parse = simpleDateFormat.parse(date);            return getHourRoll(hours, DATE_YEAR_FULL, parse);        } catch (ParseException e) {            e.printStackTrace();            return null;        }    }    /**     * 获取N小时之前的结束时间     *     * @param hours  前几小时     * @param format 结果需要格式化的模板 参考英文格式     * @return format     */    public static String getHourRoll(Integer hours, String format, Date date) {        if (hours == null) hours = 0;        Calendar calendar = getCalendar();        calendar.setTime(date);        calendar.add(Calendar.HOUR, -hours);        calendar.set(Calendar.MINUTE, 59);        calendar.set(Calendar.SECOND, 59);        calendar.set(Calendar.MILLISECOND, 999);        Date time = calendar.getTime();        String value = new SimpleDateFormat(format).format(time);        return value;    }    /**     * 获取前几天     *     * @param days 前几天(默认当前开始)     * @return     */    public static String getDayRoll(Integer days) {        return getDayRoll(days, DATE_YEAR_FULL, new Date());    }    /**     * 获取前几天     *     * @param days   前几天     * @param format 结果需要格式化的模板(参考上面英文格式)     * @param date     * @return     */    public static String getDayRoll(Integer days, String format, Date date) {        if (days == null) days = 0;        Calendar calendar = getCalendar();        calendar.setTime(date);        calendar.add(Calendar.DAY_OF_MONTH, -days);        calendar.set(Calendar.MINUTE, 59);        calendar.set(Calendar.SECOND, 59);        calendar.set(Calendar.MILLISECOND, 999);        Date time = calendar.getTime();        String value = new SimpleDateFormat(format).format(time);        return value;    }    /**     * 将字符串日期转换成中文语法(2021年1月1日 23时6分46秒)     *     * @param str (字符串格式为yyyy-MM-dd HH:mm:ss)     * @return     */    public static String getFormatCN(String str) {        boolean matches = Pattern.matches(PATTERN_YEAR_FULL_AUTO, str);        String format = "";        String formatResult = "";        if (!matches) {            log.error("日期格式错误");            return null;        }        if (Pattern.matches(PATTERN_YEAR_FULL, str)) {            format = DATE_YEAR_FULL;            formatResult = DATE_YEAR_FULL_CN;        } else if (Pattern.matches(PATTERN_YEAR_DAY, str)) {            format = DATE_YEAR_DAY;            formatResult = DATE_YEAR_DAY_CN;        }        return getFormatCN(str, format, formatResult);    }    /**     * 将字符串型日期转换成中文语法(2021年1月1日 23时6分46秒)     *     * @param str          (字符串)     * @param format       (所传入字符串的日期格式)     * @param formatResult (参考上面中文格式)     * @return     */    public static String getFormatCN(String str, String format, String formatResult) {        Date date = null;        try {            boolean matches = Pattern.matches(PATTERN_YEAR_FULL_AUTO, str);            if (!matches) {                log.error("日期格式错误");                return null;            }            date = new SimpleDateFormat(format).parse(str);            return getFormatCN(date, formatResult);        } catch (ParseException e) {            e.printStackTrace();            return null;        }    }    /**     * 将date型日期转换成中文语法(2021年1月1日 23时6分46秒)     *     * @param date   日期格式     * @param format (参考上面中文格式)     * @return     */    public static String getFormatCN(Date date, String format) {        String value = "";        Calendar calendar = getCalendar();        calendar.setTime(date);        int year = calendar.get(Calendar.YEAR);        int month = calendar.get(Calendar.MONTH) + 1;        int DAY = calendar.get(Calendar.DAY_OF_MONTH);        int hour = calendar.get(Calendar.HOUR_OF_DAY);        int minute = calendar.get(Calendar.MINUTE);        int MILLISECOND = calendar.get(Calendar.SECOND);        value = format.replaceAll("y", String.valueOf(year)).                replaceAll("M", String.valueOf(month)).                replaceAll("d", String.valueOf(DAY)).                replaceAll("H", String.valueOf(hour)).                replaceAll("m", String.valueOf(minute)).                replaceAll("s", String.valueOf(MILLISECOND));        return value;    }    /**     * 验证时间格式与是否为空     *     * @param pattern 时间格式     * @param time    具体时间     * @return     */    public static DataResult validationTime(String pattern, String time) {        String ptt = StringUtils.isBlank(pattern) ? PATTERN_YEAR_FULL_AUTO : pattern;        String format = "";        if (PATTERN_YEAR_FULL.equals(pattern)) {            format = DATE_YEAR_FULL;        } else if (PATTERN_YEAR_DAY.equals(pattern)) {            format = DATE_YEAR_DAY;        } else if (PATTERN_YEAR_MONTH.equals(pattern)) {            format = DATE_YEAR_MONTH;        }        if (StringUtils.isBlank(time)) {            return DataResult.fail("时间参数为空");        }        boolean matches = Pattern.matches(ptt, time);        if (!matches) {            return DataResult.fail("时间格式错误,请使用" + format);        }        return DataResult.ok();    }    public static void main(String[] args) {        for (int i = 0; i < 10; i++) {            String s = UUIDUtil.getUniqueId();            System.out.println(s);        }    }}