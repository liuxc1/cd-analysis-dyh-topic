package ths.project.service.common;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.annotation.Aspect;import org.aspectj.lang.annotation.Before;import org.aspectj.lang.annotation.Pointcut;import org.springframework.stereotype.Component;/** * @author:Toledo * @date:2021/3/17 14:30 * @descripthion: **/@Aspect@Componentpublic class AspectConfig {    /*    在  包下的类 的 方法，都能注入代码                  * xx.xx.*.*(..) 该包下所有类的方法,不包括子包                  * xx.xx..*.*(..) 该包下所有类的方法,包括子包     */    @Pointcut("execution(* ths.project.api..*.*(..)) ")    public void pt() {    }    /**     * 前置通知：目标方法执行之前执行以下方法体的内容     *     * @param jp     */    @Before(value = "pt()")    public void beforeMethod(JoinPoint jp) {        String methodName = jp.getSignature().getName();//获取方法名        Class t = jp.getSignature().getDeclaringType();//获取实体类型        Object[] args = jp.getArgs();//参数值        CommonUtils.setParamByContent(t, methodName, args);    }}