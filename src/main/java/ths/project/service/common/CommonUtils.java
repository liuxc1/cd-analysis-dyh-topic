package ths.project.service.common;import com.alibaba.druid.sql.visitor.functions.Char;import com.google.common.collect.Maps;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.springframework.core.LocalVariableTableParameterNameDiscoverer;import java.lang.reflect.Method;import java.text.DecimalFormat;import java.util.HashMap;import java.util.Map;import java.util.Optional;import java.util.regex.Matcher;import java.util.regex.Pattern;/** * @author:Toledo * @date:2021/3/17 11:55 * @descripthion: 分类不明确的工具或者, 工具类型极少. 可以写在这里 **/@Slf4jpublic class CommonUtils {    private ThreadLocal<Map<String, Object>> threadLocal;    private static final CommonUtils sInstance = new CommonUtils();    /**     * 创建实例     *     * @return     */    public static CommonUtils getInstance() {        sInstance.threadLocal = Optional.ofNullable(sInstance.threadLocal).orElse(new ThreadLocal<>());        return sInstance;    }    /**     * 添加map     *     * @param map     */    public static void setMap(Map<String, Object> map) {        getInstance().threadLocal.set(map);    }    /**     * 添加值     *     * @param key     * @param object     */    public static void setMap(String key, Object object) {        Map<String, Object> map = getInstance().threadLocal.get();        if (map != null && map.size() > 0) {            if (map.containsKey(key)) {                log.info("已覆盖:[" + key + "]值[" + map.get(key) + "]");            }            Map params = Maps.newHashMap();            params.put(key, object);            getInstance().threadLocal.set(params);        }    }    /**     * 获取全部参数     */    public static Map<String, Object> getMap() {        return getInstance().threadLocal.get();    }    public static Object getMap(String key) {        Map<String, Object> map = getInstance().threadLocal.get();        if (!map.containsKey(key)) {            log.info("There is no key:[" + key + "]");            return null;        }        return map.get(key);    }    /**     * 获取参数(是aop切面,获取的服务层方法的参数名称和值,意味着更改服务层参数名,xxx.xml的参数名也要更改)     */    public static Map<String, Object> getParamByContent() {        Map<String, Object> map = CommonUtils.getInstance().threadLocal.get();        return map;    }    /**     * 设置参数 以及值     *     * @param t          类型     * @param methodName 方法名称     * @param args       参数值     */    public static void setParamByContent(Class t, String methodName, Object[] args) {        if (StringUtils.isBlank(methodName)) {            log.error("please input [methodName]");            return;        }        if (t == null) {            log.error("Class must is not null");            return;        }        if (args == null || args.length < 0) {            return;        }        Map<String, Object> params = new HashMap<>();        Method[] declaredMethods = t.getDeclaredMethods();//获取方法        for (Method method :                declaredMethods) {            if (method.getName().equals(methodName)) {                //获取方法参数名称                LocalVariableTableParameterNameDiscoverer u = new LocalVariableTableParameterNameDiscoverer();                if (u == null) {                    return;                }                String[] parameterNames = u.getParameterNames(method);                if (parameterNames == null || parameterNames.length != args.length) {                    return;                }                for (int i = 0; i < parameterNames.length; i++) {                    params.put(parameterNames[i], args[i]);                }            }        }        CommonUtils.getInstance().threadLocal.set(params);    }    public static double round(double value) {        return round(value, 2);    }    /**     * 保留几位数     *     * @param value     * @param digits     * @return     */    public static double round(double value, int digits) {        StringBuilder str = new StringBuilder();        for (int i = 0; i < digits; i++) {            if (i == 0) {                str.append(".");            }            str.append("#");        }        DecimalFormat df = new DecimalFormat("#" + str);        return Double.valueOf(df.format(value));    }    /**     * 验证是否是基础数据类型     *     * @return     */    public static boolean validationDataBase(Object object) {        if (object == null) {            return false;        }        if (object instanceof String) {            return true;        } else if (object instanceof Integer) {            return true;        } else if (object instanceof Float) {            return true;        } else if (object instanceof Double) {            return true;        } else if (object instanceof Char) {            return true;        } else if (object instanceof Boolean) {            return true;        } else if (object instanceof Byte) {            return true;        } else if (object instanceof Long) {            return true;        }        return false;    }    /**     * 验证是否纯数字     *     * @param check     * @return     */    public static Boolean isNumber(String check) {        if (StringUtils.isBlank(check)) {            return false;        }        Pattern compile = Pattern.compile("[0-9]*");        Matcher matcher = compile.matcher(check);        return matcher.matches();    }    /**     * 小数     *     * @param check     * @return     */    public static Boolean isDecimal(String check) {        if (StringUtils.isBlank(check)) {            return false;        }        Pattern compile = Pattern.compile("/^(\\d+)(.\\d{0,2})?$/");        Matcher matcher = compile.matcher(check);        return matcher.matches();    }    public static int getInt(String target) {        return getInt(target, 0);    }    public static double getDouble(String target) {        return getDouble(target, 0);    }    /**     * @param target       目标值     * @param defaultValue 默认值     * @return     */    public static int getInt(String target, int defaultValue) {        int maxValue = Integer.MAX_VALUE;        Integer i = Integer.valueOf(target);        return StringUtils.isBlank(target) ? defaultValue : Integer.parseInt(target);    }    public static double getDouble(String target, int defaultValue) {        if (!isNumber(target)) {            throw new Error("非数字类型");        }        return StringUtils.isBlank(target) ? defaultValue : Integer.parseInt(target);    }    public static String subscriptConversion(String value) {        return value.replaceAll("NOX", "NOx")                .replaceAll("PM25", "PM₂.₅")                .replaceAll("PM10", "PM₁₀")                .replaceAll("O3", "O₃")                .replaceAll("NO2", "NO₂")                .replaceAll("SO2", "SO₂")                .replaceAll("VOCS", "VOCs");    }    public static void main(String[] args) {        System.out.println(isDecimal("142.23"));    }}