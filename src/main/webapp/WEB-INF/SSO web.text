    <!-- 添加到字符串过滤器之后，安全过滤器之前 -->
	<!-- ========================单点登录开始 ======================== -->
	<!--用于单点退出，该过滤器用于实现单点登出功能 -->
	<listener>
		<listener-class>org.jasig.cas.client.session.SingleSignOutHttpSessionListener</listener-class>
	</listener>
	<!--该过滤器用于实现单点登出功能。 -->
	<filter>
		<filter-name>CASSingle Sign OutFilter</filter-name>
		<filter-class>org.jasig.cas.client.session.SingleSignOutFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CASSingle Sign OutFilter</filter-name>
		<!-- url-pattern 不需要修改 -->
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>

	<!--该过滤器负责对Ticket的校验工作，必须启用它 -->
	<filter>
		<filter-name>CASValidationFilter</filter-name>
		<filter-class> org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter
		</filter-class>
		<init-param>
			<param-name>casServerUrlPrefix</param-name>
			<!-- SSO SERVER的IP+端口+上下文 -->
			<param-value>${spring.ths.nacos.cas.casServerUrlPrefix}</param-value>
		</init-param>
		<init-param>
			<param-name>serverName</param-name>
			<!--客户端的IP+端口 -->
			<param-value>${spring.ths.nacos.cas.casServerName}</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CASValidationFilter</filter-name>
		<!-- url-pattern 不需要修改 -->
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>CASFilter</filter-name>
		<filter-class>ths.jdp.cas.client.filter.CustomAuthenticationFilter</filter-class>
		<init-param>
			<param-name>casServerLoginUrl</param-name>
			<!-- SSO SERVER的IP+端口+上下文+登录地址 -->
			<param-value>${spring.ths.nacos.cas.casServerLoginUrl}</param-value>
		</init-param>
		<init-param>
			<param-name>serverName</param-name>
			<!--客户端的IP+端口-->
			<param-value>${spring.ths.nacos.cas.casServerName}</param-value>
		</init-param>
		<init-param>
			<param-name>regExcludeUrl</param-name>
			<!-- 不过滤的路径，值为正则 -->
			<param-value><![CDATA[/profee/|/console/]]></param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CASFilter</filter-name>
		<!-- url-pattern 不需要修改 -->
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>

	<!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置。 -->
	<filter>
		<filter-name>CASHttpServletRequest WrapperFilter</filter-name>
		<filter-class>
			org.jasig.cas.client.util.HttpServletRequestWrapperFilter
		</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CASHttpServletRequest WrapperFilter</filter-name>
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>

	<!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName()。 -->
	<filter>
		<filter-name>CASAssertion Thread LocalFilter</filter-name>
		<filter-class>org.jasig.cas.client.util.AssertionThreadLocalFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>CASAssertion Thread LocalFilter</filter-name>
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>

	<!-- SSO 登录后，业务系统获取登录用户信息  SSO-Client Filter-->
	<filter>
		<filter-name>SSOClientFilter</filter-name>
		<filter-class>ths.jdp.project.filter.SSOClientFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>SSOClientFilter</filter-name>
		<url-pattern>*.vm</url-pattern>
	</filter-mapping>
	<!-- ========================单点登录结束 ======================== -->

